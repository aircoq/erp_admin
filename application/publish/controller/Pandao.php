<?php

namespace app\publish\controller;

use app\common\controller\Base;
use app\common\exception\JsonErrorException;
use app\publish\queue\PandaoProductJobQueue;
use app\publish\service\JoomService;
use app\publish\service\PandaoAccountService;
use app\publish\service\PandaoService;
use app\publish\service\WishHelper;
use app\publish\task\PandaoDownloadProduct;
use think\Exception;
use think\Request;
use app\common\service\Common;
/**
 * @module 刊登系统
 * @title Pandao刊登控制器
 * Class Pandao
 * packing app\publish\controller
 */
class Pandao extends Base
{
    private $service=null;
    private $uid = 0;
    private $channel_id=8;
    public function __construct(Request $request)
    {
        parent::init(); // TODO: Change the autogenerated stub
        if($this->service==null){
            $this->service = new PandaoService();
        }
         $this->uid = Common::getUserInfo($request) ? Common::getUserInfo($request)['user_id'] : 0;
    }
    /**
     * @title Pandao刊登记录提交刊登
     * @url /publish/pandao/push-queue
     * @access public
     * @method post
     * @param array $request
     * @output think\Response
     */
    public function pushQueue(Request $request){
        try{
            $ids = $request->param('id',0);
            if(empty($ids)){
                throw new JsonErrorException("请选择你要提交刊登的数据");
            }
            $response = $this->service->pushQueue($ids);
            return json($response);
        }catch (Exception $exp){
            throw new JsonErrorException($exp->getMessage());
        }
    }
    /**
     * @title Pandao操作日志
     * @url /publish/pandao/logs
     * @access public
     * @method GET
     * @param array $request
     * @output think\Response
     */
    public function logs(Request $request){
        try {

            $page = $request->get('page', 1);
            $pageSize = $request->get('pageSize', 50);

            //搜索条件
            $param = $request->param();

            if(!isset($param['product_id']))
            {
                return json(['message'=>'缺少参数product_id'],400);
            }
            $fields = "*";
            $response = (new PandaoService())->getLogs($param, $page, $pageSize, $fields);
            return  json($response);
        }catch(Exception $exp){
            throw new JsonErrorException("File:{$exp->getFile()};Line:{$exp->getLine()};Message:{$exp->getMessage()}");

            return json(['message' => '数据异常','data'=>[]]);
        }
    }
    /**
     * @title Pandao同步listing
     * @url /publish/pandao/rsync-product
     * @access public
     * @method POST
     * @param array $request
     * @output think\Response
     */

    public function rsyncProduct(Request $request){
        $ids = $request->param('ids');
        if(empty($ids)){
            throw new JsonErrorException("请选择你要同步的产品");
        }
        $uid= Common::getUserInfo($request) ? Common::getUserInfo($request)['user_id'] : 0;
        $response = (new PandaoService())->batchAction($ids,$uid,'rsyncProduct','同步listing');
        return json($response);
    }
    /**
     * @title Pandao批量下架
     * @url /publish/pandao/batch-disable
     * @access public
     * @method POST
     * @param array $request
     * @output think\Response
     */

    public function batchDisable(Request $request){
        $ids = $request->param('ids');
        if(empty($ids)){
            throw new JsonErrorException("请选择你要批量下架的产品");
        }
        $uid= Common::getUserInfo($request) ? Common::getUserInfo($request)['user_id'] : 0;
        $response = (new PandaoService())->batchAction($ids,$uid,'disableProduct','商品下架');
        return json($response);
    }
    /**
     * @title Pandao批量上架
     * @url /publish/pandao/batch-enable
     * @access public
     * @method POST
     * @param array $request
     * @output think\Response
     */

    public function batchEnable(Request $request){
        $ids = $request->param('ids');
        if(empty($ids)){
            throw new JsonErrorException("请选择你要上架的产品");
        }
        $uid= Common::getUserInfo($request) ? Common::getUserInfo($request)['user_id'] : 0;
        $response = (new PandaoService())->batchAction($ids,$uid,'enableProduct','商品上架');
        return json($response);
    }
    /**
     * @title Pandao删除刊登记录
     * @url /publish/pandao/delete
     * @access public
     * @method delete
     * @param array $request
     * @output think\Response
     */
    public function delete(Request $request)
    {
        try{
            $id = $request->param('ids','');
            if(empty($id)){
                throw new JsonErrorException("商品id不能为空");
            }
            $response = $this->service->delete($id);
            return json($response);
        }catch (Exception $exp){
            throw new JsonErrorException($exp->getMessage());
        }
    }

    /**
     * @title Pandao编辑修改获取数据
     * @url /publish/pandao/edit/id/:id(\d+)/status/:status(\w+)
     * @method get
     * @author joy
     * @access public
     * @return json
     */
    public function edit(Request $request,$id,$status)
    {
        try{
            if(empty($id))
            {
                return json(['message'=>'id不正确'],400);
            }

            $response = (new PandaoService())->getProductAndVariant($id,$status);
            return json($response);
        }catch (Exception $exp){
            throw new JsonErrorException("File:{$exp->getFile()};Line{$exp->getLine()};Message:{$exp->getMessage()}");
        }
    }
    /**
     * @title Pandao更新修改了的数据
     * @url /publish/pandao/update
     * @method post
     * @author joy
     * @access public
     * @return json
     */
    public function update(Request $request)
    {
        try{

            //获取post过来的数据
            $post =$request->param();
            $service = new PandaoService();

            $uid= Common::getUserInfo($request) ? Common::getUserInfo($request)['user_id'] : 0;

            $post['uid'] = $uid ;

            $response = $service->updateProductAndVariant($post);

            if($response['result'])
            {
                return json(['message'=>$response['message']]);
            }else{
                return json(['message'=>$response['message']],400);
            }
        }catch (Exception $exp){
            throw new JsonErrorException("File:{$exp->getFile()};Line:{$exp->getLine()};Message:{$exp->getMessage()}");
        }
    }
    /**
     * @title pandao获取商品数据
     * @url /publish/pandao/getdata
     * @method get
     * @author joy
     * @access public
     * @return json
     */

    public function getData(Request $request)
    {
        try{
            $goods_id = $request->param('goods_id',0);
            if(empty($goods_id))
            {
                return json(['message'=>'商品id不正确'],400);
            }
            $response = (new JoomService())->getGoodsData($goods_id);
            return json($response);
        }catch (Exception $exp){
            throw new JsonErrorException("File:{$exp->getFile()};Line{$exp->getLine()};Message:{$exp->getMessage()}");
        }
    }
    /**
     * @title Pandao新增刊登
     * @url /publish/pandao/add
     * @access public
     * @method post
     * @param array $request
     * @output think\Response
     */

    public function add(Request $request){
        try{
            $post = $request->param();

            $post['uid'] = Common::getUserInfo($request) ? Common::getUserInfo($request)['user_id'] : 0;

            $service = new PandaoService();

            $response = $service->create($post);
            if(is_numeric($response))
            {
                return json(['message'=>'成功提交['.$response.']条']);
            }else{
                return json(['message'=>$response],400);
            }

        }catch (Exception $exp){
            throw new JsonErrorException("File:{$exp->getFile()};Line{$exp->getLine()};Message:{$exp->getMessage()}");
        }
    }
    /**
     * @title Pandao销售人员列表
     * @url /pandao-sellers
     * @access public
     * @method GET
     * @param array $request
     * @output think\Response
     */

    public function sellers(Request $request){
        try{
            $response = (new WishHelper())->getWishUsers(8);
            return json($response);
        }catch (Exception $exp){
            throw new JsonErrorException($exp->getMessage());
        }
    }
    /**
     * @title Pandao在售listing
     * @url /pandao-on-selling
     * @access public
     * @method GET
     * @param array $request
     * @output think\Response
     */

    public function index(Request $request){
        try {
            $param = $request->param();
            $page = $request->get('page', 1);
            $pageSize = $request->get('pageSize', 50);
            $helper = new PandaoService();
            $fields = "DISTINCT(p.id),p.*";
            $data = $helper->lists($param, $page, $pageSize, $fields);
            return json($data);
        } catch (Exception $exp) {
            throw new JsonErrorException("File:{$exp->getFile()};Line:{$exp->getMessage()};Message:{$exp->getMessage()}");
        }
    }
    /**
     * @title Pandao停售listing
     * @url /pandao-sold-out
     * @access public
     * @method GET
     * @param array $request
     * @output think\Response
     */

    public function soldOut(Request $request){
        try {
            $param = $request->param();
            $page = $request->get('page', 1);
            $pageSize = $request->get('pageSize', 50);
            $helper = new PandaoService();
            $fields = "DISTINCT(p.id),p.*";
            $data = $helper->lists($param, $page, $pageSize, $fields);
            return json($data);
        } catch (Exception $exp) {
            throw new JsonErrorException("File:{$exp->getFile()};Line:{$exp->getMessage()};Message:{$exp->getMessage()}");
        }
    }
    /**
     * @title Pandao刊登记录
     * @url /pandao-publish-record
     * @access public
     * @method GET
     * @param array $request
     * @output think\Response
     */

    public function records(Request $request){
        try {
            $param = $request->param();
            $page = $request->get('page', 1);
            $pageSize = $request->get('pageSize', 50);
            $helper = new PandaoService();
            $fields = "DISTINCT(p.id),p.*";
            $data = $helper->lists($param, $page, $pageSize, $fields);
            return json($data);
        } catch (Exception $exp) {
            throw new JsonErrorException("File:{$exp->getFile()};Line:{$exp->getMessage()};Message:{$exp->getMessage()}");
        }
    }

    /**
     * @title Pandao待刊登商品列表
     * @url /publish/pandao/wait-upload
     * @access public
     * @method GET
     * @param array $request
     * @output think\Response
     */

    public function waitUpload(Request $request){
        try {
            $page = $request->get('page', 1);
            $pageSize = $request->get('pageSize', 50);
            $helper = new WishHelper();
            //搜索条件
            $param = $request->param();
            $fields = "*";
            $param['channel']=$this->channel_id;
            $data = $helper->waitPublishGoodsMap($param, $page, $pageSize, $fields);
            return json($data);
        } catch (Exception $exp) {
           throw new JsonErrorException($exp->getMessage());
        }
    }

    /**
     * @title 获取刊登账号
     * @url /publish/pandao/accounts
     * @method GET
     * @return \think\response\Json
     */
    public function getPublishAccount(Request $request)
    {
        try {
            $params = $request->param();
            $res = $this->service->getPublishAccount($params);
            return json($res);
        } catch (\Exception $e) {
            return json(['message'=>$e->getMessage()], 500);
        }
    }

    /**
     * @title MyMall导出
     * @url /publish/pandao/export
     * @access public
     * @method post
     * @param Request $request
     * @return \think\response\Json
     */
    public function export(Request $request){
        try {
            $param = $request->param();
            $result = $this->service->reportExport($param);
            return json($result, 200);
        } catch (Exception $e) {
            return json(['message' => $e->getMessage()], 400);
        }
    }
}
