<?php
/**
 * Created by PhpStorm.
 * User: Tom
 * Date: 2017/6/8
 * Time: 17:42
 */
namespace app\carrier\task;

use app\carrier\service\AliSellerAddressService;
use app\common\cache\Cache;
use app\common\exception\TaskException;
use app\index\service\AbsTasker;
use service\alinew\AliexpressApi;
use think\Exception;

class AliSellerAddress extends AbsTasker
{
    public function getCreator()
    {
        return '翟彬';
    }

    public function getDesc()
    {
        return 'Aliexpress-同步卖家地址信息';
    }

    public function getId()
    {
        return parent::getId(); // TODO: Change the autogenerated stub
    }

    public function getName()
    {
        return 'Aliexpress-同步卖家地址信息';
    }

    public function getParamRule()
    {
        return [];
    }

    public function execute()
    {
        try {
            $accountList = Cache::store('AliexpressAccount')->getTableRecord();
            foreach ($accountList as $account) {
               /* if ($account['id'] != 265) {
                    continue;
                }*/
                if ($account['is_invalid'] == 1 && $account['is_authorization']) {
                    $config = [
                        'id'=> $account['id'],
                        'client_id'=> $account['client_id'],
                        'client_secret'=> $account['client_secret'],
                        'token'=> $account['access_token'],
                        'refreshtoken'=> $account['refresh_token'],
                    ];
                    $response = AliexpressApi::instance($config)->loader('ShippingMethod')->getLogisticsSellerAddresses();
                    $info = isset($response->result) && $response->result ? json_decode($response->result, true) : [];
                    if (isset($info['result_success']) && $info['result_success']) {
                        $pickup = $refund = $sender = [];
                        if (isset($info['pickup_seller_address_list']) && !empty($info['pickup_seller_address_list']['pickupselleraddresslist'])) {
                            $pickup = $info['pickup_seller_address_list']['pickupselleraddresslist'];
                        }
                        if (isset($info['refund_seller_address_list']) && !empty($info['refund_seller_address_list']['refundselleraddresslist'])) {
                            $refund = $info['refund_seller_address_list']['refundselleraddresslist'];
                        }
                        if (isset($info['sender_seller_address_list']) && !empty($info['sender_seller_address_list']['senderselleraddresslist'])) {
                            $sender = $info['sender_seller_address_list']['senderselleraddresslist'];
                        }
                        $helpServer = new AliSellerAddressService();
                        $helpServer->saveSellerAddress(array_merge($pickup, $refund, $sender), $account['id']);
                    }
                }
                unset($info);
            }
        }catch(Exception $ex){
            throw new TaskException($ex->getMessage());
        }
    }

    public function executeByAccount($account_id)
    {
        try {
            $accountList = Cache::store('AliexpressAccount')->getTableRecord();
            foreach ($accountList as $account) {
                if ($account['id'] != $account_id) {
                    continue;
                }
                if ($account['is_invalid'] == 1 && $account['is_authorization']) {
                    $config = [
                        'id'=> $account['id'],
                        'client_id'=> $account['client_id'],
                        'client_secret'=> $account['client_secret'],
                        'token'=> $account['access_token'],
                        'refreshtoken'=> $account['refresh_token'],
                    ];
                    $response = AliexpressApi::instance($config)->loader('ShippingMethod')->getLogisticsSellerAddresses();
                    $info = isset($response->result) && $response->result ? json_decode($response->result, true) : [];
                    if (isset($info['result_success']) && $info['result_success']) {
                        $pickup = $refund = $sender = [];
                        if (isset($info['pickup_seller_address_list']) && !empty($info['pickup_seller_address_list']['pickupselleraddresslist'])) {
                            $pickup = $info['pickup_seller_address_list']['pickupselleraddresslist'];
                        }
                        if (isset($info['refund_seller_address_list']) && !empty($info['refund_seller_address_list']['refundselleraddresslist'])) {
                            $refund = $info['refund_seller_address_list']['refundselleraddresslist'];
                        }
                        if (isset($info['sender_seller_address_list']) && !empty($info['sender_seller_address_list']['senderselleraddresslist'])) {
                            $sender = $info['sender_seller_address_list']['senderselleraddresslist'];
                        }
                        $helpServer = new AliSellerAddressService();
                        $helpServer->saveSellerAddress(array_merge($pickup, $refund, $sender), $account['id']);
                    }
                }
                unset($info);
            }
        }catch(Exception $ex){
            throw new TaskException($ex->getMessage());
        }
    }
}