<?php
// +----------------------------------------------------------------------
// | 客服邮件功能控制器
// +----------------------------------------------------------------------
// | File  : AmazonEmail.php
// +----------------------------------------------------------------------
// | Author: LiuLianSen <3024046831@qq.com>
// +----------------------------------------------------------------------
// | Date  : 2017-07-18
// +----------------------------------------------------------------------
namespace app\customerservice\controller;


use app\common\controller\Base;
use app\common\model\customerservice\EmailList;
use app\order\service\OrderService;
use imap\EmailAccount;
use think\Db;
use think\db\Query;
use think\Exception;
use think\Log;
use think\Request;
use app\customerservice\service\AmazonEmail as AmazonEmailServ;
use app\api\controller\Post;

/**
 * @module 客服管理
 * @title 售后邮件
 * @author LiuLianSen
 * @url /amazon-emails
 */
class AmazonEmail extends Base
{

    const AMAZON_CHANNEL_ID = 2;
    const TEST_USER_ID = 1;




    protected  $result  = ['code' => 200,'message' =>''];


    /**
     * @var AmazonEmailServ
     */
    protected $defServ = null;


    /**
     * @param $msg
     * @param $code
     * @param array $append
     */
    private function setResult( $msg, $code = 200, $append = [])
    {
        $this->result['code'] = $code;
        $this->result['message'] = $msg;
        if($append){
            $this->result= array_merge($this->result,$append);
        }
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stubar_dump(1);
        $this->defServ = new AmazonEmailServ();
    }


    /**
     * @title 客服邮件查询接口
     * @url /amazon-emails
     * @method get
     * @param Request $request
     * @return \think\response\Json
     */
    public function index(Request $request)
    {
        try {
            return json($this->defServ->searchReceivedMail($request->param()));
        } catch (Exception $e) {
            return json(['message' => $e->getMessage()], 400);
        }
    }


    /**
     * @title 客户历史邮件查询接口
     * @url /amazon-emails/senders/:email_address
     * @method get
     * @param Request $request
     * @return \think\response\Json
     */
    public function getCustomerAllEmails(Request $request)
    {
        $emailAddr = $request->param('email_address','');
        if(empty($emailAddr)) {
            return json(['message' => '未设置要查询的邮箱分组ID'], 400);
        }
        $params = $request->param();
        $page = param($params, 'page', 1);
        $pageSize = param($params, 'pageSize', 5);
        try {
            $result = $this->defServ->getCustomerHistoerEmails($emailAddr, $page, $pageSize);
            return json($result);
        }catch (\Exception $ex){
            Log::error($ex->getTraceAsString());
            throw new Exception($ex->getMessage() . $ex->getFile() . $ex->getLine());
        }
    }

    /**
     * @title 更新指定id的邮件
     * @url /amazon-emails/:id
     * @method put
     * @param Request $request
     * @return \think\response\Json
     */
    public function update(Request $request)
    {
        try {
            $id = $request->param('id/d', 0);
            if (!$id) {
                $this->setResult('无效的邮件id', 400);
            }
            $this->defServ->updateReceivedMail($id,$request->param());
            return json(['message'=>'更新成功']);
        }catch (\Exception $ex) {
            $msg = $ex->getMessage();
            $code = $ex->getCode();
            if($code == 0){
                $msg = '程序内部错误';
                $code = 500;
            }
            return json(['message'=>$msg],$code);
        }
    }



    /**
     * 将邮件记录model转换成数组
     * @param $reocrd
     * @return array
     */
    private function recordModelToArray(&$reocrd)
    {
       return [
            'id'           => $reocrd->id,
            'account_id'   => $reocrd->account_id,
            'account_code' => $reocrd->amazonAccount? $reocrd->amazonAccount->code :'',
            'account_name' => $reocrd->amazonAccount? $reocrd->amazonAccount->account_name :'',
            'receiver'     => $reocrd->receiver,
            'sender'       => $reocrd->sender,
            'sync_time'    => $reocrd->sync_time,
            'platform'     => $reocrd->platform,
            'site'         => $reocrd->site,
            'order_no'     => $reocrd->order_no,
            'buyer_id'     => $reocrd->amazonOrder ?  $reocrd->amazonOrder->user_name : '',
            'buyer_name'   => $reocrd->amazonOrder ?   $reocrd->amazonOrder->platform_username : '',
            'box_id'       => $reocrd->box_id,
            'box_code'     => $reocrd->box_code,
            'box_name'     => $reocrd->box_name,
            'is_read'      => $reocrd->is_read,
            'is_replied'   => $reocrd->is_replied,
            'flag_id'      => $reocrd->flag_id,
            'flag_code'    => $reocrd->flag ?  $reocrd->flag->code : '',
            'flag_name'    => $reocrd->flag ?  $reocrd->flag->ch_name : '',
            'subject'      => $reocrd->subject,
            'body'         => $reocrd->body,
            'attachments'  => $reocrd->attachmentsArray
        ];
    }



    /**
     * @title 获取客户的历史订单
     * @url /orders/buyer-amazon-orders/:buyer_id
     * @method get
     * @param Request $request
     * @return \think\response\Json
     */
    public function getAmazonBuyerHistoryOrders(Request $request)
    {
        $data = [];
        try{
            $buyerId = $request->param('buyer_id',null);
            if(empty($buyerId)){
                throw new Exception('买家id非法',400);
            }
            $accountId = Db::table('amazon_order')->where('email',$buyerId)->value('account_id');
            if(!empty($accountId)){
                $data = (new OrderService())->history(2,$accountId,$buyerId);
                foreach ($data as &$r) {
                    $r['evaluation']   = '';
                    $r['dispute']      = '';
                    $r['return_goods'] = '';
                }
            }
        }catch (Exception $ex){
            $code = $ex->getCode();
            return json(['code'=>$code,'message'=>$ex->getMessage()],$code);
        }
        return json(['code'=>200,'message'=>'','data'=>$data],200);
    }


    /**
     * @title 获取能够管理制定账号的客服列表
     * @url /amazon-emails/account/customers
     * @method get
     * @param Request $request
     * @return \think\response\Json
     */
    public function getAmazonAccountCustomerList(Request $request)
    {
        try{
            $accountId = $request->param('account_id/d',null);
            if(is_null($accountId)){
                throw new Exception('平台账号id未设置',400);
            }
            $data = Db::table('user')
                ->join('channel_user_account_map map','user.id =map.customer_id')
                ->field('user.id as customer_id,user.realname')
                ->where([
                    'map.channel_id'=> 2,
                    'map.account_id' => $accountId
                ])->select();
            return json(['code'=>200,'message'=>'','data'=>$data],200);
        }catch (Exception $ex){
            $code = $ex->getCode();
            return json(['code'=>$code,'message'=>$ex->getMessage()],$code);
        }
    }




    /*
     * @title 收取指定平台账号的邮件
     * @url /amazon-emails/email-account/receive/:account_id
     * @method get
     * @param Request $request
     * @return \think\response\Json
     */
    public function receiveEmails(Request $request)
    {
        try {
            set_time_limit(0);
            $accountId = $request->param('account_id/d', null);
            if (empty($accountId)) {
                throw new Exception('平台账号id未设置', 400);
            }
            $accRecord = Db::table('email_accounts')->where('account_id',$accountId)->find();
            if($accRecord){
                $serv = new AmazonEmailServ();
                $syncQty = $serv->receiveEmail(
                        new EmailAccount(  $accRecord['account_id'],
                        $accRecord['email_account'],
                        $accRecord['email_password'],
                        $accRecord['imap_url'],
                        $accRecord['imap_ssl_port'],
                        $accRecord['smtp_url'],
                        $accRecord['smtp_ssl_port'],'Amazon'), $accRecord['id']);
                return json(['code' => 200, 'message' => '','received_qty'=>$syncQty]);
            }else{
                throw new Exception('平台账号没有设置邮件账号',404);
            }
        } catch (Exception $ex) {
            throw new Exception($ex->getMessage());exit;
            $code = $ex->getCode();
            $message = '程序内部错误';
            if ($code != 0) $message = $ex->getMessage();
            return json(['code' => $code, 'message' => $message], $code);
        }
    }

    /**
     * @title 亚马逊邮件标记已读
     * @method Post
     * @url read
     * @param Request $request
     * @apiParam name:id type:int require:1 desc:ID
     * @apiParam name:is_read type:int require:1 desc:是否已读（1-是）
     * @apiReturn status:状态（1-成功 0-失败）
     * @apiReturn message:操作信息
     * @param Request $request
     * @return \think\response\Json
     */
    public function markRead(Request $request)
    {
        try {
            $params = $request->param();
            if(!param($params, 'id') || !param($params,'is_read') || $params['is_read']!=1){
                return json(['message'=>'参数错误'],400);
            }
            $help = new AmazonEmailServ();
            $result = $help->markReadEmail($params['id']);
            if($result){
                return json(['status'=>1,'message'=>'标记已读成功'],200);
            }else{
                return json(['status'=>0,'message'=>'标记已读失败'],400);
            }
        } catch (Exception $ex) {
            return json($ex->getMessage(),400);
        }
    }

    
    /**
     * @title 匹配回复模板内容
     * @method get
     * @url tpl/content
     * @param Request $request
     * @return type
     */
    public function matchTemplateContent(Request $request)
    {
        try {
            $params = $request->param();
            if(param($params, 'id') || param($params, 'template_id')){
                return json(['message'=>'参数错误'],400);
            }
            $help = new AmazonEmailServ();
            $content = $help->matchTemplateContent($params['id'],$params['template_id']);
            return json(['content'=>$content],200);
        } catch (Exception $ex) {
            return json($ex->getMessage(),500);
        }    
    }



    /**
     * @title 获取客服对应的账号
     * @method GET
     * @apiReturn data:账号信息
     * @url /amazon-message/account
     * @return \think\Response
     */
    public function getAmazonAccountMessageTotal(Request $request)
    {
        try {
            $params = $request->param();
            $help = new AmazonEmailServ();
            $datas = $help->getAmazonAccountMessageTotal($params);

            return json($datas);
        } catch (Exception $e) {
            return json(['message' => $e->getMessage()], 400);
        }
    }


    /**
     * @title 获取所有站点
     * @method GET
     * @url site
     * @return array
     */
    public function getAllSite()
    {
        $help = new AmazonEmailServ();
        $datas = $help->getAllSite();
        return json($datas);

    }

    /**
     * @title 获取全部可发送邮件的账号
     * @method GET
     * @url amazon-emailAccount
     * @return array
     */
    public function emailAccount()
    {
        $help = new AmazonEmailServ();
        $datas = $help->emailAccount();
        return json($datas);
    }
}
