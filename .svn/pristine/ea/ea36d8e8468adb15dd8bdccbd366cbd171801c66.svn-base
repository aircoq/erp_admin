<?php
/**
 * Created by PhpStorm.
 * User: libaimin
 * Date: 2018/6/5
 * Time: 18:16
 */

namespace cd;

use cd\CdBaseApi;
use think\Cache;
use think\Loader;

class CdOrderApi extends CdBaseApi
{
    public function __construct(array $params = [])
    {
        parent::__construct($params);
        Loader::import('autoload', EXTEND_PATH . '/cd/sdk/vendor');
        Loader::import('autoload', EXTEND_PATH . '/cd/sdk/sdk');
    }

    /**
     * 通过订单ID，拿取订单信息用于更新；
     * @param $order_id 订单ID
     */
    public function getOrderById($order_id)
    {
        error_reporting(-1);

        $client = new \Sdk\ApiClient\CDSApiClient($this->client_id,$this->client_secret);
        $token = $client->init();
        if ($token == null || !$client->isTokenValid()) {
            $this->error =  "CD token bad";
            return false;
        }

        $orderPoint = $client->getOrderPoint();
        $orderFilter = new \Sdk\Order\OrderFilter();
        $orderFilter->addOrderReferenceToList($order_id);
        $orderListResponse = $orderPoint->getOrderList($orderFilter, $token);


        if ($orderListResponse->hasError()) {
            $this->error = $orderListResponse->getErrorMessage();
        }

        $orders = $orderListResponse->getOrderList()->getOrders();

        if ($orders == null) {
            $this->error .= "----You have no order matching these dates<br/>";
            return false;
        }
        return $orders;
    }

    /**
     * 通过得到商户货币类型
     */
    public function getAccountToken(){
        $client = new \Sdk\ApiClient\CDSApiClient($this->client_id,$this->client_secret);
        $token = $client->init();

        if ($token == null || !$client->isTokenValid()) {
            $this->error =  "CD token bad";
            return false;
        }

        /****************** GET SELLER INDICATORS ****************/

        $sellerPoint = $client->getSellerPoint();

        $sellerResponse = $sellerPoint->getSellerInformation();

        if ($sellerResponse->hasError()) {
            $this->error = $sellerResponse->getErrorMessage();
            return false;
        }
        else {
            $seller = $sellerResponse->getSeller();
            $res = [
                'email' =>  $seller->getEmail(),
                'login' =>  $seller->getLogin(),
                'mobileNumber' =>  $seller->getMobileNumber(),
                'phoneNumber' =>  $seller->getPhoneNumber(),
                'address1' =>  $seller->getSellerAddress()->getAddress1(),
                'zipCode' =>  $seller->getSellerAddress()->getZipCode(),
                'city' =>  $seller->getSellerAddress()->getCity(),
                'country' =>  $seller->getSellerAddress()->getCountry(),
                'SIRET' =>  $seller->getSiretNumber(),
                'ShopName' =>  $seller->getShopName(),
            ];
            return $res;

        }
    }

    public function getTokens(){
        error_reporting(-1);

        $client = new \Sdk\ApiClient\CDSApiClient($this->client_id,$this->client_secret);
        $token = $client->init();

        if ($token == null || !$client->isTokenValid()) {
            $this->error =  "CD token bad";
            return false;
        }

        return $token;
    }

    /**
     * 抓取一段时间内的订单的列表
     * @param datetime $startTime
     * @param datetime $endTime
     * @param int $limit
     * @return array
     *
     */
    public function getOrderLists($startTime = '', $endTime = '', $limit = 200)
    {
        error_reporting(-1);

        $client = new \Sdk\ApiClient\CDSApiClient($this->client_id,$this->client_secret);
        $token = $client->init();
        if ($token == null || !$client->isTokenValid()) {
            $this->error =  "CD token bad";
            return false;
        }

        $orderPoint = $client->getOrderPoint();
        $orderFilter = new \Sdk\Order\OrderFilter();
        $orderFilter->setFetchOrderLines(true);
        $orderFilter->setFetchParcels(true);

        if($startTime){ //订单创建时间 开始
//            $startTime = is_numeric($startTime) ? date('Y-m-d\TH:i:s', $startTime) : $startTime;
            $startTime = gmdate("Y-m-d\TH:i:s", $startTime);
            $orderFilter->setBeginCreationDate($startTime);
        }

        if($endTime){  //订单创建时间 结束
//            $endTime = is_numeric($endTime) ? date('Y-m-d\TH:i:s', $endTime) : $endTime;
            $endTime = gmdate("Y-m-d\TH:i:s", $endTime);
            $orderFilter->setEndCreationDate($endTime);
        }
//        var_dump($startTime , $endTime,$orderFilter);
        $orderListResponse = $orderPoint->getOrderList($orderFilter, $token);

        if ($orderListResponse->hasError()) {
            $this->error = $orderListResponse->getErrorMessage();
        }

        $orders = $orderListResponse->getOrderList()->getOrders();
        if ($orders == null) {
            $this->error .= "----You have no order matching these dates<br/>";
            return false;
        }
        return $orders;
    }


    /** 发货订单
     * @param $order_id 订单ID
     * @param $items 订单商品总数量
     * @param $trackingInfo 跟踪提供商信息【shipDateTime-发货时间,carrier：快递商,methodCode：运输方法，trackingNumber：追踪号，trackingURL：查快递的链接】
     * @param $isOtherCarrier 是否为cd平台快递商
     * @return bool
     */
    public function fulfillOne($order_id, $items = [], $carrier = '', $trackingNumber, $trackingUrl='')
    {

        $resultArr = $this->getOrderById($order_id);
        if(isset($resultArr[0]) && $resultArr[0]->getOrderState() == 'Shipped'){
            return true;
        }

        error_reporting(-1);

        $client = new \Sdk\ApiClient\CDSApiClient($this->client_id, $this->client_secret);
        $token = $client->init();

        if ($token == null || !$client->isTokenValid()) {
            $this->error = "CD token bad";
            return false;
        }
        $orderPoint = $client->getOrderPoint();

        $order = new \Sdk\Order\Validate\ValidateOrder($order_id);
        $order->setCarrierName($carrier);
        $order->setOrderState(\Sdk\Order\OrderStateEnum::Shipped);
        $order->setTrackingNumber($trackingNumber);
        $order->setTrackingUrl($trackingUrl);

        $orderLineList = new \Sdk\Order\OrderLineList();

        /**
         * AcceptationState : AcceptedBySeller
         * ProductCondition : New
         * SellerProductId : CHI8003970895435
         */
        foreach ($items as $v) {
            $validateOrderLine = new \Sdk\Order\Validate\ValidateOrderLine($v, \Sdk\Order\AcceptationStateEnum::ShippedBySeller, \Sdk\Order\ProductConditionEnum::NewS);
            //$validateOrderLine->setTypeOfReturn(\Sdk\Order\AskingForReturnType::AskingForReturn);

            $orderLineList->addOrderLine($validateOrderLine);
            //$orderLineList->addOrderLine(new \Sdk\Order\ValidateOrderLine('DOD3592668078117', \Sdk\Order\OrderStateEnum::AcceptedBySeller, \Sdk\Order\ProductConditionEnum::NewS));
        }


        $order->setOrderLineList($orderLineList);

        $orderList = new \Sdk\Order\OrderList();
        $orderList->addOrder($order);

        $validateOrderListResponse = $orderPoint->validateOrderList($orderList,$token);

        if ($validateOrderListResponse->hasError()) {
            $this->error .= $validateOrderListResponse->getErrorMessage();
            return false;
        } else {
            return true;
        }

    }
    public function showOrder($orders){
        if($orders){
            die('没有订单');
        }
        $cnt = 1;
        /** @var \Sdk\Order\Order $order */
        foreach ($orders as $order) {

            echo "<br/><br/>";

            echo "---------      ORDER n° " . $cnt . " / " . sizeof($orders) . "  ----------<br/>";

            echo "&nbsp;&nbsp;&nbsp;ArchiveParcelList : " . ($order->isArchiveParcelList() ? 'true' : 'false') . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;CreationDate : " . $order->getCreationDate() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;HasClaims : " . ($order->isHasClaims() ? 'true' : 'false') . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;InitialTotalAmount : " . $order->getInitialTotalAmount() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;InitialTotalShippingChargesAmount : " . $order->getInitialTotalShippingChargesAmount() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;isCLogistiqueOrder : " . ($order->isIsCLogistiqueOrder() ? 'true' : 'false') . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;LastUpdatedDate : " . $order->getLastUpdatedDate() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;ModGesLog : " . $order->getModGesLog() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;ModifiedDate : " . $order->getModifiedDate() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;Order Number : " . $order->getOrderNumber() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;PartnerOrderRef : " . $order->getPartnerOrderRef() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;ShippedTotalAmount : " . $order->getShippedTotalAmount() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;ShippedTotalShippingCharges : " . $order->getShippedTotalShippingCharges() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;ShippingCode : " . $order->getShippingCode() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;SiteCommissionPromisedAmount : " . $order->getSiteCommissionPromisedAmount() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;SiteCommissionShippedAmount : " . $order->getSiteCommissionShippedAmount() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;SiteCommissionValidatedAmount : " . $order->getSiteCommissionValidatedAmount() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;Status : " . $order->getStatus() . "<br/>";
            echo "&nbsp;&nbsp;&nbsp;Visa : " . $order->getVisaCegid() . "<br/>";

            $parceList = $order->getParcelList()->getParcels();

            /** @var \Sdk\Parcel\Parcel $parcel */
            foreach ($parceList as $parcel) {
                echo "---------      PARCEL     ----------<br/>";

                echo "Customer Number : " . $parcel->getCustomerNum() . "<br/>";
                echo "Parcel Status : " . $parcel->getParcelStatus() . "<br/>";

                echo "---------      PARCEL ITEM    ----------<br/>";

                $parcelItemList = $parcel->getParcelItemList()->getParcelItems();
                /** @var \Sdk\Parcel\ParcelItem $parcelItem */
                foreach ($parcelItemList as $parcelItem) {
                    echo "ProductName : " . $parcelItem->getProductName() . "<br/>";
                    echo "Quantity : " . $parcelItem->getQuantity() . "<br/>";
                    echo "Sku : " . $parcelItem->getSku() . "<br/>";
                }

                echo "---------      END PARCEL ITEM    ----------<br/>";

                echo "---------      Tracking list    ----------<br/>";

                $trackingList = $parcel->getTrackingList();
                if (isset($trackingList)) {
                    /*
                     * @var \SDK\Parcel\Tracking
                     */
                    foreach ($trackingList->getTrackings() as $tracking) {
                        echo "TrackingId : " . $tracking->getTrackingId() . "<br/>";
                        echo "ParcelNum : " . $tracking->getParcelNum() . "<br/>";
                        echo "Justification : " . $tracking->getJustification() . "<br/>";
                        echo "InsertDate : " . $tracking->getInsertDate() . "<br/>";
                    }

                    echo "---------      END tracking list   ----------<br/>";

                    echo "---------      END PARCEL     ----------<br/>";
                }
            }

            echo "---------      VOUCHER LIST   ----------<br>";

            $voucherList = $order->getVoucherList();
            if (isset($voucherList)) {
                /*
                 * \Sdk\Order\Voucher
                 */
                foreach ($voucherList->getVouchers() as $voucher) {

                    echo "Createdate = " . $voucher->getCreateDate() . "<br/>";
                    echo "Source = " . $voucher->getSource() . "<br/>";

                    echo '<br/>---------REFUND INFORMATION----------------<br/>';

                    $refundInformationResponse = $voucher->getRefundInformation();

                    echo "Amount = " . $refundInformationResponse->getAmount() . "<br/>";
                    echo "Motive id = " . $refundInformationResponse->getMotiveId() . "<br/>";
                }
            }
            echo "---------      END VOUCHER LIST   ----------<br>";
            echo "---------      ORDERLINELIST     ----------<br/>";
            $cntOL = 1;

            if ($order->getOrderLineList() != null) {
                $orderLineList = $order->getOrderLineList()->getOrderLines();
                /** @var Sdk\Order\OrderLine $orderLine */
                foreach ($orderLineList as $orderLine) {

                    echo "<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;---------      ORDERLINELIST  " . $cntOL . " / " . sizeof($orderLineList) . "    ----------<br/>";

                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AcceptationState = " . $orderLine->getAcceptationState() . "<br/>";

                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CategoryCode = " . $orderLine->getCategoryCode(). "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeliveryDateMax = " . $orderLine->getDeliveryDateMax() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeliveryDateMin = " . $orderLine->getDeliveryDateMin() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HasClaim = " . $orderLine->isHasClaim() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InitialPrice = " . $orderLine->getInitialPrice() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IsCDAV = " . $orderLine->isCdav() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IsNegotiated = " . $orderLine->isIsNegotiated() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IsProductEanGenerated = " . $orderLine->isProductEanGenerated() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name = " . $orderLine->getName() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductCondition = " . $orderLine->getProductCondition() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductEan = " . $orderLine->getProductEan() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProductId = " . $orderLine->getProductId() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PurchasePrice = " . $orderLine->getPurchasePrice() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Quantity = " . $orderLine->getQuantity() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RowId = " . $orderLine->getRowId() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SellerProductId = " . $orderLine->getSellerProductId() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShippingDateMax = " . $orderLine->getShippingDateMax() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ShippingDateMin = " . $orderLine->getShippingDateMin() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sku = " . $orderLine->getSku() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SkuParent = " . $orderLine->getSkuParent() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UnitAdditionalShippingCharges = " . $orderLine->getUnitAdditionalShippingCharges() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UnitShippingCharges = " . $orderLine->getUnitShippingCharges() . "<br/>";
                    echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RefundShippingCharges = " . $orderLine->isRefundShippingChargesResult() . "<br/>";
                    echo "<br/><br/>";
                    ++$cntOL;
                }

            }

            echo "---------      ORDERLINELISTEND     ----------<br/>";
            echo "---------      ORDER END     ----------<br/>";
            ++$cnt;
        }

    }

}