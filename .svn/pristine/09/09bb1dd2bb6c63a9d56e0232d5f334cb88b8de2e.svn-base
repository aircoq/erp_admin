<?php
/**
 * 付款 API基础服务类
* @author wangwei
* @date 2018-11-16 13:42:44
*/
namespace service\amazon\Finances;

use service\amazon\AmazonLib;

class FinancesBaseService{

	protected $_service = null;//服务对象
	protected $_serviceUrl = '';//服务地址
	protected $_MarketplaceId = '';//商城代码
	protected $_config = array();//配置信息
	protected $_tokenConfig = array();//授权信息
	protected $_amazonConfig = array();//亚马逊基础信息

	const SERVICE_PATH = '/Finances/';//路径

	/**
	 * 加载自定义类，放在MWSFinancesService目录下的类
	 * @param string $class
	 */
	protected static function autoload($class) {
		$file = str_replace('_', "/", $class) . '.php';
		// 自动加载自定义类
		if (preg_match('/^(MWSFinancesService\/.*)/i', $file)) {
		    $load_file = dirname(__DIR__) .'/'. $file;
// 		    var_dump($load_file);
		    require_once ($load_file);
		}
	}

	/**
	 * 构造器
	 * @param string $token_id  amazon_account.access_key_id
	 * @param string $token  amazon_account.secret_key
	 * @param string $seller_id  amazon_account.merchant_id
	 * @param string $site  amazon_account.site
	 * @param string $mws_auth_token  amazon_account.auth_token
	 */
	public function __construct($token_id, $token, $seller_id, $site,$mws_auth_token=null){
		//自定义加载
		spl_autoload_register(array(__CLASS__,'autoload'));
		// 访问秘钥ID
		$this->_tokenConfig['AWS_ACCESS_KEY_ID'] = $token_id;
		// 访问秘钥
		$this->_tokenConfig['AWS_SECRET_ACCESS_KEY'] = $token;
		// 销售ID
		$this->_tokenConfig['MERCHANT_ID'] = $seller_id;
		// 站点
		$this->_tokenConfig['SITE'] = $site;
		//第三方授权token
		$this->_tokenConfig['MWS_AUTH_TOKEN'] = empty($mws_auth_token) ? null : $mws_auth_token;
		// 应用名称
		$this->_tokenConfig['APPLICATION_NAME'] = AmazonLib::APPLICATION_NAME;
		// 应用版本
		$this->_tokenConfig['APPLICATION_VERSION'] = AmazonLib::APPLICATION_VERSION;
	}

	/**
	 * 设置服务对象
	 */
	public function setService(){
		//设置亚马逊基础信息
		if(empty($this->_amazonConfig)){
			$this->setAmazonConfig($this->_tokenConfig['SITE']);
		}
		//设置商城代码
		$this->_MarketplaceId = $this->_amazonConfig['marketplace_id'];
		//服务地址
		if(empty($this->_serviceUrl)){
		    $serviceUrl = $this->_amazonConfig['service_url'] . self::SERVICE_PATH . AmazonLib::SERVICE_VERSION_ORDER_20150501;
			$this->setServiceUrl($serviceUrl);
		}
		$config = array(
				'ServiceURL' => $this->_serviceUrl,
				'ProxyHost' => null,
				'ProxyPort' => - 1,
				'MaxErrorRetry' => 3
		);
		$this->_config = $config;
		$service = new \MWSFinancesService_Client(
				$this->_tokenConfig['AWS_ACCESS_KEY_ID'],
				$this->_tokenConfig['AWS_SECRET_ACCESS_KEY'],
				$this->_tokenConfig['APPLICATION_NAME'],
				$this->_tokenConfig['APPLICATION_VERSION'],
				$config);
		$this->_service = $service;
	}

	/**
	 * 获取服务对象
	 */
	public function getService(){
		return $this->_service;
	}

	/**
	 * 设置服务地址
	 */
	public function setServiceUrl($url){
		$this->_serviceUrl = $url;
	}

	/**
	 * 设置亚马逊基础信息
	 * @param string $site  站点
	 */
	public function setAmazonConfig($site){
		if(empty($site)){
			throw new Exception("获取亚马逊服务地址及商城编号失败，站点不能为空");
		}
		$amazonConfig = AmazonLib::getAmazonConfig();
		if(empty($amazonConfig[$site])){
			throw new Exception("amzon站点： $site ，未能找到对应的亚马逊服务地址及商城编号.");
		}
		$this->_amazonConfig = $amazonConfig[$site];
	}

	/**
	 * 获取亚马逊基础信息
	 * @param string $site  站点
	 */
	public function getAmazonConfig(){
		return $this->_amazonConfig;
	}

	/**
	 * 执行请求
	 * @param \MWSFinancesService_Client $service 请求服务对象
	 * @param object $request 请求参数对象
	 * @param string $method  请求方法
	 * @return multitype:number string NULL Ambigous <string, NULL> Ambigous <string, NULL, unknown>
	 */
	public function executeRequest(\MWSFinancesService_Client $service, $request,$method){
		$return = array(
				'ask'=>0,
				'data'=>'',
				'message'=>'',
				'statusCode'=>'',
				'errorCode'=>'',
				'errorType'=>'',
				'requestId'=>'',
				'XML'=>'',
				'responseHeaderMetadata'=>'',
		);
		try {
			if(empty($method)){
				throw new \MWSFinancesService_Exception(array('Message'=>'方法名不能为空'));
			}
			$method = ucfirst($method);//首字母大写
			if(method_exists($service,$method)){
			    $response = $service->$method($request);
			}else{
				throw new \MWSFinancesService_Exception(array('Message'=>"方法->{$method},不存在"));
			}
			$dom = new \DOMDocument();
			$dom->loadXML($response->toXML());
			$dom->preserveWhiteSpace = false;
			$dom->formatOutput = true;
			$data = $dom->saveXML();

			$return['ask'] = 1;
			$return['data'] = $data;
			$return['message'] = 'success';
			$return['XML'] = $response->toXML();
			//获取请求id
			if($response->isSetResponseMetadata()){
				$responseMetadata = $response->getResponseMetadata();
				if ($responseMetadata->isSetRequestId()){
					$return['requestId'] = $responseMetadata->getRequestId();
				}
			}
			$return['responseHeaderMetadata'] = $response->getResponseHeaderMetadata();
			
		} catch (\MWSFinancesService_Exception $ex) {
			$return['message'] = $ex->getMessage();
			$return['statusCode'] = $ex->getStatusCode();
			$return['errorCode'] = $ex->getErrorCode();
			$return['errorType'] = $ex->getErrorType();
			$return['requestId'] = $ex->getRequestId();
			$return['XML'] = $ex->getXML();
			$return['responseHeaderMetadata'] = $ex->getResponseHeaderMetadata();
		} catch(\Exception $exx){
		    $error_msg = $exx->getMessage() . ',File:' . $exx->getFile() . ',Line:' . $exx->getLine();
		    $return['message'] = $error_msg;
		    $return['errorCode'] = $exx->getCode();
		}
		return $return;
	}

}