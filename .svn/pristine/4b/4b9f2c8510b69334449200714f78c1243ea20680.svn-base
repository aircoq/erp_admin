<?php
namespace barcode1;
require_once __DIR__."/example/vendor/autoload.php";

use BarcodeBakery\Common\BCGColor;
use BarcodeBakery\Common\BCGDrawing;
use BarcodeBakery\Common\BCGFontFile;
use BarcodeBakery\Barcode\BCGcode128;
use think\Exception;

class Png128
{
    public function createImg($text='123456',$scale=2,$Thickness=30){

        // Loading Font
        $font = new BCGFontFile(__DIR__ . '/example/font/Arial.ttf', 18);

// Don't forget to sanitize user inputs


// The arguments are R, G, B for color.
        $color_black = new BCGColor(0, 0, 0);
        $color_white = new BCGColor(255, 255, 255);

        $drawException = null;
        try {
            $code = new BCGcode128();
            $code->setScale($scale); // Resolution
            $code->setThickness($Thickness); // Thickness
            $code->setForegroundColor($color_black); // Color of bars
            $code->setBackgroundColor($color_white); // Color of spaces
            $code->setFont(0); // Font (or 0)
            $code->setStart(null);
            $code->setTilde(false);
            $code->parse($text); // Text
        } catch (Exception $exception) {
            $drawException = $exception;
        }

        /* Here is the list of the arguments
        1 - Filename (empty : display on screen)
        2 - Background color */
        $drawing = new BCGDrawing('', $color_white);
        if ($drawException) {
            $drawing->drawException($drawException);
        } else {
            $drawing->setBarcode($code);
            $drawing->draw();
        }

// Header that says it is an image (remove it if you save the barcode to a file)
        //header('Content-Type: image/png');
       // header('Content-Disposition: inline; filename="barcode.png"');

// Draw (or save) the image into PNG format.
        $drawing->finish(BCGDrawing::IMG_FORMAT_PNG);
    }

}