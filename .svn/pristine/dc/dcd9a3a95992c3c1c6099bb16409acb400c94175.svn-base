<?php

namespace Waimao\AmazonMws;

use Waimao\AmazonMws\AmazonCore;
use Waimao\AmazonMws\AmazonReportConfig;
use app\common\model\amazon\LogAmazonRequestReport as LogAmazonRequestReportModel;

/**
 * Copyright 2013 CPI Group, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Core class for Amazon Reports API.
 *
 * This is the core class for all objects in the Amazon Reports section.
 * It contains no methods in itself other than the constructor.
 */
abstract class AmazonReportsCore extends AmazonCore
{
    /**
     * AmazonReportsCore constructor sets up key information used in all Amazon Reports Core requests
     *
     * This constructor is called when initializing all objects in the Amazon Reports Core.
     * The parameters are passed by the child objects' constructors, which are
     * in turn passed to the AmazonCore constructor. See it for more information
     * on these parameters and common methods.
     * @param string $s <p>Name for the store you want to use.</p>
     * @param boolean $mock [optional] <p>This is a flag for enabling Mock Mode.
     * This defaults to <b>FALSE</b>.</p>
     * @param array|string $m [optional] <p>The files (or file) to use in Mock Mode.</p>
     * @param string $config [optional] <p>An alternate config file to set. Used for testing.</p>
     */
    public function __construct($s, $mock = false, $m = null)
    {
        parent::__construct($s, $mock, $m);
        include($this->env);

        $this->urlbranch = '';
        if (isset($AMAZON_VERSION_REPORTS)) {
            $this->options['Version'] = $AMAZON_VERSION_REPORTS;
        }
    }

    /**
     * Checks for a token and changes the proper options
     * @param SimpleXMLObject $xml <p>response data</p>
     * @return boolean <b>FALSE</b> if no XML data
     */
    protected function checkToken($xml)
    {
        if (!$xml) {
            return false;
        }
        if ((string)$xml->HasNext == 'true') {
            $this->tokenFlag = true;
            $this->options['NextToken'] = (string)$xml->NextToken;
        } else {
            unset($this->options['NextToken']);
            $this->tokenFlag = false;
        }
    }

    /**
     * logRequestReport
     * @param array $params
     * @return mixed|string
     *      */
    public function logRequestReport(array $params)
    {
        //add log_amazon_request_report record
        $logAmazonRequestReportModel = new LogAmazonRequestReportModel();
        $reportTypeIndex = AmazonReportConfig::$ReportTypeIndex[$params['ReportType']];
        $data = [
            'report_start_time'=>$params['StartDate'],
            'report_end_time'=>$params['EndDate'],
            'report_type'=>$reportTypeIndex,
            'created_date'=>date('Y-m-d H:i:s'),
            'updated_date'=>date('Y-m-d H:i:s'),
        ];

        $logAmazonRequestReportModel->data($data);
        $logAmazonRequestReportModel->save();
        $log_id = $logAmazonRequestReportModel->id;
        if(!$log_id)
            return 'Insert report Failured!';
        return $log_id;
    }

    /**
     * updateReportRequestId
     * @param $reportRequestId
     * @param $logId
     */
    public function updateLogRequestReport($data, $where)
    {
        //add log_amazon_request_report record
        $logAmazonRequestReportModel = new LogAmazonRequestReportModel();
        $logAmazonRequestReportModel->save($data, $where);
    }
}

?>
