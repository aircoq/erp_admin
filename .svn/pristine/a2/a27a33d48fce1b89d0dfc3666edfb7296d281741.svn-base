<?php

namespace app\report\service;

use app\common\cache\Cache;
use app\common\exception\JsonErrorException;
use app\common\model\account\AccountOperationAnalysis;
use app\common\service\Common;
use app\common\traits\Export;
use app\index\service\AccountService;
use app\index\service\ChannelAccount;
use app\index\service\DepartmentUserMapService;
use app\order\service\OrderService;
use app\report\model\ReportExportFiles;
use app\report\validate\FileExportValidate;
use function GuzzleHttp\Psr7\str;
use think\Exception;
use think\Loader;

Loader::import('phpExcel.PHPExcel', VENDOR_PATH);

/**
 * Created by PhpStorm.
 * User: ZhouFurong
 * Date: 2019/4/20
 * Time: 14:24
 */
class AccountOperationAnalysisService
{

	use Export;

	private $accountOperationModel;

	/**
	 * 字段
	 */
	public function title()
	{
		$title = [
			'dateline' => [
				'title' => 'dateline',
				'remark' => '日期',
				'is_show' => 1
			],
			'channel_name' => [
				'title' => 'channel_name',
				'remark' => '平台',
				'is_show' => 1
			],
			'site' => [
				'title' => 'site',
				'remark' => '站点',
				'is_show' => 1
			],
			'account_name' => [
				'title' => 'account_name',
				'remark' => '账户简称',
				'is_show' => 1
			],
			'seller_name' => [
				'title' => 'seller_name',
				'remark' => '销售员',
				'is_show' => 1
			],
			'team_leader_name' => [
				'title' => 'team_leader_name',
				'remark' => '销售组长',
				'is_show' => 1
			],
			'supervisor_name' => [
				'title' => 'supervisor_name',
				'remark' => '销售主管',
				'is_show' => 1
			],
			'department_name' => [
				'title' => 'department_name',
				'remark' => '销售所属部门',
				'is_show' => 1
			],
			'account_status' => [
				'title' => 'account_status',
				'remark' => '账户状态',
				'is_show' => 1
			],
			'is_vat' => [
				'title' => 'is_vat',
				'remark' => '是否有VAT',
				'is_show' => 1
			],
			'can_send_fba' => [
				'title' => 'can_send_fba',
				'remark' => '是否可发FBA',
				'is_show' => 1
			],
			'publish_quantity' => [
				'title' => 'publish_quantity',
				'remark' => '刊登数量',
				'is_show' => 1
			],
			'online_listing_quantity' => [
				'title' => 'online_listing_quantity',
				'remark' => '昨日在线listing数量',
				'is_show' => 1
			],
			'sale_amount' => [
				'title' => 'sale_amount',
				'remark' => '销售额（USD）',
				'is_show' => 1
			],
			'order_quantity' => [
				'title' => 'order_quantity',
				'remark' => '订单数',
				'is_show' => 1
			],
			'odr' => [
				'title' => 'odr',
				'remark' => 'ODR',
				'is_show' => 1
			],
			'virtual_order_quantity' => [
				'title' => 'virtual_order_quantity',
				'remark' => '智持订单数量',
				'is_show' => 1
			],
			'average_retail_rate' => [
				'title' => 'average_retail_rate',
				'remark' => '平均动销率',
				'is_show' => 1
			],
			'online_asin_quantity' => [
				'title' => 'online_asin_quantity',
				'remark' => '在线asin数量',
				'is_show' => 1
			],
			'account_register_time' => [
				'title' => '账号注册时间',
				'remark' => '销售员',
				'is_show' => 1
			],
			'account_transition_time' => [
				'title' => 'account_transition_time',
				'remark' => '账号交接时间',
				'is_show' => 1
			],
		];
		return $title;
	}

	public function __construct()
	{
		if (is_null($this->accountOperationModel)) {
			$this->accountOperationModel = new AccountOperationAnalysis();
		}


	}


	/**
	 * 导出申请
	 * @param $params
	 * @return bool
	 * @throws Exception
	 * @throws \Exception
	 */
	public function applyExport($params)
	{
		$userId = Common::getUserInfo()->toArray()['user_id'];
		$cache = Cache::handler();
		$lastApplyTime = $cache->hget('hash:export_goods_apply', $userId);
		if ($lastApplyTime && time() - $lastApplyTime < 5) {
			throw new JsonErrorException('请求过于频繁', 400);
		} else {
			$cache->hset('hash:export_account_monitor', $userId, time());
		}
		try {
			$model = new ReportExportFiles();
			$data['applicant_id'] = $userId;
			$data['apply_time'] = time();
			$data['export_file_name'] = $this->createExportFileName();
			$data['status'] = 0;
			$data['applicant_id'] = $userId;
			$model->allowField(true)->isUpdate(false)->save($data);
			$params['file_name'] = $data['export_file_name'];
			$params['apply_id'] = $model->id;
			(new CommonQueuer(AmazonAccountMonitorExportQueue::class))->push($params);
			return true;
		} catch (\Exception $ex) {
			throw new JsonErrorException('申请导出失败');
		}
	}

	/**
	 * 创建导出文件名
	 *
	 * @param array $params
	 * @param [string] $date_b
	 * @param [string] $date_e
	 * @return string
	 */
	protected function createExportFileName()
	{
		$fileName = '账户运营分析' . '(' . date('Y-m-d', time()) . ')' . '.xlsx';
		return $fileName;
	}

	/**
	 * 导出数据至excel文件
	 * @param array $params
	 * @return bool
	 * @throws Exception
	 */
	public function export(array $datelines = [], array $field = [], $params = [])
	{
		set_time_limit(0);
		$userInfo = Common::getUserInfo();
		try {
			if (empty($datelines)) {
				if (Cache::store('order')->isExport($userInfo['user_id'])) {
					throw new JsonErrorException('全部导出正在生成数据,请使用部分导出');
				}
				Cache::store('order')->setExport($userInfo['user_id']);
			}
			//获取导出文件名
			$fileName = $this->newExportFileName($params);
			//判断是否存在筛选条件，更改导出名
			if (isset($fileName) && $fileName != '') {
				$setFileName = 1;
				$name = $fileName . $userInfo['user_id'] . '_' . date('Y-m-d H:i:s', time()) . (isset($params['name']) ? $params['name'] : '订单数据');
				$fileName = $name;
			} else {
				$setFileName = 0;
				$name = isset($params['name']) ? $params['name'] : '订单数据';
				$fileName = $name . date('YmdHis', time());
			}

			$params['user_id'] = $userInfo['user_id'];
			$downLoadDir = '/download/report/account/';
			$saveDir = ROOT_PATH . 'public' . $downLoadDir;
			if (!is_dir($saveDir) && !mkdir($saveDir, 0777, true)) {
				throw new Exception('导出目录创建失败');
			}
			$fullName = $saveDir . $fileName;
			$titleData = $this->title();
			$condition = [];
			if (!empty($datelines)) {
				$condition['a.dateline'] = ['in', $datelines];
			}

			if (empty($field)) {
				$title = [];
				foreach ($titleData as $k => $v) {
					if ($v['is_show'] == 1) {
						array_push($title, $k);
					}
				}
			}

			if (!empty($field)) {
				$title = [];
				foreach ($field as $k => $v) {
					if (isset($titleData[$v])) {
						array_push($title, $v);

					}
				}
			}

			//创建excel对象
			$writer = new \XLSXWriter();
			$titleMap = $this->colMap['title'];
			$title = [];
			$titleData = $this->colMap['data'];
			foreach ($titleData as $k => $v) {
				array_push($title, $k);
			}
			$titleOrderData = [];
			foreach ($titleMap as $t => $tt) {
				$titleOrderData[$tt['title']] = 'string';
			}
			//统计需要导出的数据行
			$where = [];
			$count = $this->searchCount($where);
			$pageSize = 10000;
			$loop = ceil($count / $pageSize);
			$writer->writeSheetHeader('Sheet1', $titleOrderData);
			//分批导出
			for ($i = 0; $i < $loop; $i ++) {
				$data = $this->assemblyDate($this->doSearch($where, $i + 1, $pageSize), $title);

				foreach ($data as $r) {
					$writer->writeSheetRow('Sheet1', $r);
				}
				unset($data);
			}
			$writer->writeToFile($fullName);

			if (is_file($fullName)) {
				$applyRecord = ReportExportFiles::get($params['apply_id']);
				$applyRecord['exported_time'] = time();
				$applyRecord['download_url'] = $downLoadDir . $fileName;
				$applyRecord['status'] = 1;
				$applyRecord->isUpdate()->save();
			} else {
				throw new Exception('文件写入失败');
			}
		} catch (\Exception $ex) {
			$applyRecord = ReportExportFiles::get($params['apply_id']);
			$applyRecord['status'] = 2;
			$applyRecord['error_message'] = $ex->getMessage();
			$applyRecord->isUpdate()->save();
			Cache::handler()->hset(
				'hash:report_export',
				$params['apply_id'] . '_' . time(),
				'申请id: ' . $params['apply_id'] . ',导出失败:' . $ex->getMessage());
		}
	}

	public function newExportFileName($params)
	{
		$fileName = '';
		if ($channel_id = param($params, 'channel_id')) {
			$title = Cache::store('channel')->getChannelTitle($channel_id);
			$fileName .= '平台：' . $title . '|';
		}
		if ($site = param($params, 'site')) {
			$fileName .= '站点：' . $site . '|';
		}
		if ($account_id = param($params, 'account_id')) {
			$order_service = new OrderService();
			$accountName = $order_service->getAccountName($params['channel_id'], $params['account_id']);
			$fileName .= '账号：' . $accountName . '|';
		}
		if ($seller_id = param($params, 'seller_id')) {
			$cache = Cache::store('user');
			$fileName .= '销售员：' . $cache->getOneUserRealname($params['seller_id']) . '|';
		}

	}

	public function getQuantityField($params)
	{
		$quantityField = [];
		if (isset($params['quantity_field']) && !empty($params['quantity_field'])) {
			if ($params['min_value'] !== '' || $params['max_value'] !== '') {
				$min_value = $params['min_value'];
				$max_value = $params['max_value'];

				if ($min_value == '') {
					$quantityField[$params['quantity_field']] = ['elt', $params['max_value']];
				} elseif ($max_value == '') {
					$quantityField[$params['quantity_field']] = ['egt', $params['min_value']];
				} else {
					$quantityField[$params['quantity_field']] = ['between', [$min_value, $max_value]];
				}
			}
		}

		return $quantityField;
	}

	public function getTimeField($params)
	{
		date_default_timezone_set("PRC");
		$timeField = [];
		if (isset($params['time_field'])) {
			if ($params['date_from'] !== '' || $params['date_to'] !== '') {
				$date_from = strtotime($params['date_from']);
				$data_to = strtotime($params['date_to']);

				if ($date_from == '') {
					$timeField[$params['time_field']] = ['elt', $data_to];
				} elseif ($data_to == '') {
					$timeField[$params['time_field']] = ['egt', $date_from];
				} else {
					$timeField[$params['time_field']] = ['between', [$date_from, $data_to]];
				}
			}
		}

		return $timeField;
	}

	/**
	 * 列表详情
	 * @param int $page
	 * @param int $pageSize
	 * @param array $params
	 * @return array
	 */
	public function search($params)
	{
		$page = param($params, 'page', 1);
		$pageSite = param($params, 'pageSite', 10);

		$count = $this->searchCount($params);
		$data = $this->assemblyDate($this->doSearch($params, $page, $pageSite));

		return [
			'page' => $page,
			'pageSize' => $pageSite,
			'count' => $count,
			'data' => $data
		];
	}

	public function searchCount($params)
	{

		$field = $this->searchField($params);
		$this->accountOperationModel->join('`account`', '`account`.`id` = `account_operation_analysis`.`account_id`', 'left');
		$this->accountOperationModel->field($field);

		$this->whereCondition($params);

		return $this->accountOperationModel->count();
	}

	public function whereCondition($param)
	{
		list($quantity_type, $time_type, $condition) = $this->getSearchCondition($param);
		if (!empty($quantity_type)) {
			$this->accountOperationModel->where($quantity_type);
		}
		if (!empty($time_type)) {
			$this->accountOperationModel->where($time_type);
		}
		if (!empty($condition)) {
			$this->accountOperationModel->where($condition);
		}
	}

	public function assemblyDate($datas, $title = [])
	{
		if (!empty($datas)) {
			$data = [];
			foreach ($datas as $key => $value) {
				$data[$key]['dateline'] = $value['dateline'];
				$data[$key]['channel_name'] = Cache::store('channel')->getChannelName($value['channel_id']);
				$data[$key]['channel_id'] = $value['channel_id'];
				$data[$key]['account_id'] = $value['account_id'];
				if (!empty($value['seller_id'])) {
					$data[$key]['seller_id'] = $value['seller_id'];
					$userMap = new DepartmentUserMapService();
					$user = $userMap->getDepartmentByUserId($value['seller_id']);
					// 部门ID
					$departmentID = $user;
					$users = (new ProfitStatement())->getLeaderDirector($value['seller_id']);
					$data[$key]['seller_name'] = Cache::store('user')->getOneUserRealname($value['seller_id']);
					$data[$key]['team_leader_name'] = $users['team_leader_name'];
					$data[$key]['supervisor_name'] = $users['supervisor_name'];
					$data[$key]['department_name'] = (Cache::store('department')->getDepartment($departmentID[0]))['name'];

				}

				if ($value['account_id'] && $value['channel_id']) {
					$account = (new ChannelAccount())->getAccount($value['channel_id'], $value['account_id']);
					$accountCode = param($account, 'code');
					$data[$key]['account_name'] = $accountCode;
				}

				$account = (new AccountService())->accountOperationAnalysis($value['account_id']);
				//dump($account);
				// '0-新增 1-已注册 2-审核中 3-注册成功 4-已交接 5-已回收 6-已作废',
				$data[$key]['account_status'] = $this->accountStatus($account['status']);


				if(!empty($account['vat_data'])){
					$data[$key]['is_vat'] = $account['vat_data'];
				}else{
					$data[$key]['is_vat'] = '否';
				}

				if($account['source'] === 1){
					$data[$key]['can_send_fba'] = '是';
				}else{
					$data[$key]['can_send_fba'] = '否';
				}

				$data[$key]['site'] = $account['site_code'];
				$data[$key]['account_register_time'] = $account['account_create_time'];
				$data[$key]['account_transition_time'] = $account['fulfill_time'];
				$data[$key]['publish_quantity'] = $value['publish_quantity'];
				$data[$key]['online_listing_quantity'] = $value['online_listing_quantity'];
				$data[$key]['sale_amount'] = $value['sale_amount'];
				$data[$key]['order_quantity'] = $value['order_quantity'];
				$data[$key]['odr'] = $value['odr'];
				$data[$key]['virtual_order_quantity'] = $value['virtual_order_quantity'];
				$data[$key]['average_retail_rate'] = 0;
				$data[$key]['online_asin_quantity'] = $value['online_asin_quantity'];

			}
			return $data;
		}

	}

	public function accountStatus($type)
	{
		$status = '';
		switch ($type) {
			case 0:
				$status = '新增';
				break;

			case 1:
				$status = '审核中';
				break;
			case 2:
				$status = '已注册';
				break;
			case 3:
				$status = '注册成功';
				break;
			case 4:
				$status = '已交接';
				break;
			case 5:
				$status = '已回收';
				break;
			case 6:
				$status = '已作废';
				break;
		}
		return $status;
	}

	/**
	 * 获取搜索条件
	 * @param $params
	 * @return array
	 */
	public function getSearchCondition($params)
	{
		date_default_timezone_set("PRC");
		$condition = [];

		// 可查看全部平台权限人员，默认显示Ebay平台,登录人的职位权限显示对应账号数据

		if (isset($params['channel_id'])) {
			$condition['channel_id'] = $params['channel_id'];
		}
		if (isset($params['site'])) {
			$condition['site'] = $params['site'];
		}
		if (isset($params['account_id']) && !empty($params['account_id'])) {
			$condition['account_id'] = $params['account_id'];
		}
		// 不同的权限查看不同
		if (isset($params['seller_id']) && !empty($params['seller_id'])) {
			$condition['seller_id'] = $params['seller_id'];
		}
		// 数量数据
		$quantity_type = $this->getQuantityField($params);
		// 日期数据
		$time_type = $this->getTimeField($params);

		return [$quantity_type, $time_type, $condition];
	}

	/**
	 * 开始搜索
	 * @param array $params
	 * @param int $page
	 * @param int $pageSite
	 * @return false|\PDOStatement|string|\think\Collection
	 * @throws \think\db\exception\DataNotFoundException
	 * @throws \think\db\exception\ModelNotFoundException
	 * @throws \think\exception\DbException
	 */
	public function doSearch(array $params = [], $page = 1, $pageSite = 10)
	{
		$field = $this->searchField($params);
		$this->accountOperationModel->join('`account`', '`account`.`id` = `account_operation_analysis`.`account_id`', 'left');
		$this->accountOperationModel->field($field);

		$this->whereCondition($params);

		$order = $this->getOrder($params);

		$this->accountOperationModel->order($order);

		//dump($this->accountOperationModel->page($page, $pageSite)->select());
		return $this->accountOperationModel->page($page, $pageSite)->select();

	}

	/**
	 * 搜索字段
	 * @param $params
	 * @return string
	 */
	public function searchField($params)
	{
		$days = $this->getDays($params);
		$fields = '`account_operation_analysis`.`dateline`,' .
			'`account_operation_analysis`.`channel_id`,' .
			'`account_operation_analysis`.`seller_id`,' .
			'`account_operation_analysis`.`account_id`,' .
			'`account_operation_analysis`.`publish_quantity`,' .
			'`account_operation_analysis`.`online_listing_quantity`,' .
			'`account_operation_analysis`.`sale_amount`,' .
			'`account_operation_analysis`.`order_quantity`,' .
			'`account_operation_analysis`.`odr`,' .
			'`account_operation_analysis`.`virtual_order_quantity`,' .
			'`account_operation_analysis`.`online_asin_quantity`,' .
			//	"(sum(`account_operation_analysis`.`order_quantity`)/$days)/(sum(`account_operation_analysis`.`online_asin_quantity`)/$days)) as  average_retail_rate `,".
			'`account`.`account_create_time`';
		return $fields;
	}

	/**
	 * 获取时间
	 * @param $params
	 * @return float|int|string
	 */
	public function getDays($params)
	{
		date_default_timezone_set("PRC");
		$today = strtotime(date('Y-m-d', time()));
		$days = 0;
		if ($params['date_from'] !== '' || $params['date_to'] !== '') {
			$date_from = strtotime($params['date_from']);
			$data_to = strtotime($params['date_to']);

			if ($date_from == '') {
				$days = round(($today - $data_to) / 3600 / 24) + 1;
			} elseif ($data_to == '') {
				$days = round(($today - $date_from) / 3600 / 24) + 1;
			} else {
				$days = round(($data_to - $date_from) / 3600 / 24) + 1;
			}
		}


		if (empty($days)) {
			$days = $this->accountOperationModel->group('dateline')->count('dateline');
		}
		return $days;
	}

	/**
	 * 获取排序
	 * @param $param
	 * @return string
	 */
	public function getOrder($param)
	{
		$order = '';
		if (empty($param['quantity_field'])) {
			$order = 'dateline asc';
		}

		if (isset($param['quantity_field']) && !empty($param['quantity_field'])) {
			$quantity_sort = $param['quantity_sort'] ?? 'asc';
			$order = $param['quantity_field'] . " $quantity_sort";
		}
		if (isset($param['time_field']) && !empty($param['time_field'])){
			$time_sort = $param['time_sort'] ?? 'asc';
			if($param['time_field'] == 'account_create_time'){
				$order .= ",account_create_time  $time_sort";
			}
		}

		return $order;
	}

	/**
	 * 回写 刊登数量 昨日在线listing数量 在线asin数量
	 * @param $channel_id
	 * @param $account_id
	 * @param array $data publish_quantity,online_listing_quantity,online_asin_quantity
	 * @param int $time
	 * @return bool
	 * @throws \think\db\exception\DataNotFoundException
	 * @throws \think\db\exception\ModelNotFoundException
	 * @throws \think\exception\DbException
	 */
	public function writePublishQuantity($channel_id, $account_id, array $data = [], $time = 0)
	{
		date_default_timezone_set("PRC");
		$add = [];
		if (empty($time)) {
			$time = strtotime(date('Y-m-d', time()));
		}
		if (empty($channel_id) || empty($account_id)) {
			return false;
		}
		if(!empty($data)){
			if(isset($data['publish_quantity'])){
				//刊登数量
				$add['publish_quantity'] = $data['publish_quantity'];
			}
			if(isset($data['online_listing_quantity'])){
				//昨日在线listing数量
				$add['online_listing_quantity'] = $data['online_listing_quantity'];
			}
			if(isset($data['online_asin_quantity'])){
				//在线asin数量
				$add['online_asin_quantity'] = $data['online_asin_quantity'];
			}
		}


		$where = [];
		$where['channel_id'] = $channel_id;
		$where['account_id'] = $account_id;
		$where['dateline'] = $time;
		try {
			if($this->accountOperationModel->where($where)->find()){
				$this->accountOperationModel->where($where)->update($add);
			}else{
				$add['channel_id'] = $channel_id;
				$add['account_id'] = $account_id;
				$add['dateline'] = $time;
				$this->accountOperationModel->isUpdate(false)->save($add);
			}

			return true;
		} catch (Exception $ex){
			throw new JsonErrorException($ex->getMessage());
		}


	}

	/**
	 * 回写 销售额 订单量 odr 智持订单数量
	 * @param $channel_id
	 * @param $account_id
	 * @param array $data sale_amount order_quantity odr virtual_order_quantity
	 * @param int $time
	 * @return bool
	 */
	public function writeSaleAmount($channel_id, $account_id, array $data = [], $time = 0)
	{
		date_default_timezone_set("PRC");
		$add = [];
		if (empty($time)) {
			$time = strtotime(date('Y-m-d', time()));
		}
		if (empty($channel_id) || empty($account_id)) {
			return false;
		}
		if(!empty($data)){
			if(isset($data['sale_amount'])){
				//销售额
				$add['sale_amount'] = $data['sale_amount'];
			}
			if(isset($data['order_quantity'])){
				//订单量
				$add['order_quantity'] = $data['order_quantity'];
			}
			if(isset($data['odr'])){
				//订单缺陷率
				$add['odr'] = $data['odr'];
			}
			if(isset($data['virtual_order_quantity'])){
				//智持订单数量
				$add['virtual_order_quantity'] = $data['virtual_order_quantity'];
			}
		}


		$where = [];
		$where['channel_id'] = $channel_id;
		$where['account_id'] = $account_id;
		$where['dateline'] = $time;
		try {
			if($this->accountOperationModel->where($where)->find()){
				$this->accountOperationModel->where($where)->update($add);
			}else{
				$add['channel_id'] = $channel_id;
				$add['account_id'] = $account_id;
				$add['dateline'] = $time;
				$this->accountOperationModel->isUpdate(false)->save($add);
			}
			return true;
		}catch (Exception $ex){
			throw new JsonErrorException($ex->getMessage());
		}
	}

}