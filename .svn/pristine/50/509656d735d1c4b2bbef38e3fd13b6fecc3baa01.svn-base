<?php

namespace service\vova;

use think\Loader;
use app\common\cache\Cache;
use think\Exception;
use app\common\model\vova\VovaOrder as VovaOrderModel;
use org\Curl;
use app\common\service\UniqueQueuer;
use app\order\queue\ChangeOrderStatusByVova;
use think\Db;
use app\common\service\ChannelAccountConst;
use app\order\service\OrderHelp;

class VovaOrderApi {


    private $app_secret;
    private $account;
    protected $error = '';

    /**
     *
     * @param unknown $account
     * @param unknown $app_secret

     */
    public function __construct($account, $app_secret) {
        $this->account = $account;
        $this->app_secret = $app_secret;


        $this->config = array(
            'ServiceURL' => '',
            'ProxyHost' => null,
            'ProxyPort' => -1,
            'MaxErrorRetry' => 1,
        );
    }
    public function getError()
    {
        return $this->error;
    }

    public function getOrder( $account,$orderid)
    {
        $share_params = array(
            'token'=>$this->app_secret,
            'order_goods_sn' => $orderid,
        );
        $response = Curl::curlGet('https://merchant-api.vova.com.hk/v1/order/Order?'.http_build_query($share_params));
        $rs=json_decode($response,true);
        foreach ($rs['data'] as $order) {
            $vovaOrderId = isset($order['order_goods_sn'])?$order['order_goods_sn']:array();
            if (empty($vovaOrderId)) {
                continue;
            }

            $orderInfo = VovaOrderModel::where(['order_goods_sn' => $vovaOrderId,'account_id'=>$account])->find();

            //订单表数据
            $order_data = array(
                'id'                  => $orderInfo ? $orderInfo['id'] : 0,
                'account_id'   =>  $account,
                'order_sn'            => $order['order_sn'],  //订单号
                'order_goods_sn'        =>$vovaOrderId,  //订单号
                'sku'               =>$order['sku'],//sku
                'website_goods_id'=>$order['website_goods_id'],//商品号
                'goods_name'        =>$order['goods_name'],//商品名称
                'goods_size'        =>$order['goods_size'],//尺寸
                'goods_color'       =>$order['goods_color'],//颜色
                'styles'           =>$order['styles'],//类型
                'goods_number'     =>$order['goods_number'],//数量
                'shop_price'        => $order['shop_price'], //商品价钱
                'shop_price_amount'=>$order['shop_price_amount'],//商品总价钱
                'shipping_fee'      =>$order['shipping_fee'],//运费
                'total_amount'        => $order['total_amount'], //订单总价钱
                'currency'             => $order['currency'], //货币类型
                'address'  => json_encode($order['address']), //收货人地址json格式
                'delivery_deadline'=>strtotime($order['delivery_deadline']),//发货时间
                'order_cancel_deadline'        => strtotime($order['order_cancel_deadline']), //取消时间
                'order_state'  => $order['order_state'], //订单状态0,未确认1,已确认2,已取消
                'shipping_state'           => $order['shipping_state'], //订单状态     0.未发货 1.已发货 2.已收货
                'image_url'             => $order['image_url'], //图片url
                'create_time'        => time(), //入库的时间
                'tracking_number'        =>'', //入库的时间
                'confirm_time'   =>strtotime($order['confirm_time']),//确认时间

            );
            //组装数据
            $inserOrder[] = array(
                'order' => $order_data,
            );
        }
        return $inserOrder;

    }
    /**
     * 抓取一段时间内的订单的列表(每次查询最多可以查100条  用递归处理)
     * @param datetime $starttime
     * @param datetime $endtime
     * @return array
     *
     */
    public function getOrderLists($account,$type) {
        $response=$this->getResponseData($page=0,$pageOffset=0, $pageSize = 100,$type);
        return $response;
    }
    private function getResponseData( $page=0,$pageOffset=0, $pageSize = 100, $type=1)
    {
        $response = [];

        if ($type == 2)
        {
            //获取订单和发货状态发生改变的订单信息
            $since = date('Y-m-d H:i:s',time()-7*24*3600);
            $share_params = array(
                'token'=>$this->app_secret,
                'since' => $since,
                'limit' => $pageSize,
                'start' => $page,
            );

            $response = Curl::curlGet('https://merchant-api.vova.com.hk/v1/order/ChangedOrders?'.http_build_query($share_params));
        } else {
            //获取未标记发货的订单信息
            $share_params = array(
                'token'=>$this->app_secret,
                'limit' => $pageSize,
                'start' => $page,
            );

            $response = Curl::curlGet('https://merchant-api.vova.com.hk/v1/order/Unhandled?'.http_build_query($share_params));
        }

        $rs=json_decode($response,true);
        if($rs['code']==20000  && is_array($rs['data'])){
            $response_data = $rs['data']['order_list'];
            if(!empty($response_data)){
                $pageOffset++;
                $next = $this->getResponseData( $pageOffset*$pageSize,$pageOffset,$pageSize = 100,$type);
                $response_data = array_merge($response_data, $next);
            }
            return $response_data;
        } else {
            $error = $rs['msg'] ?? '未知错误';
            throw new Exception($error);
        }

    }

    /**
     * 根据订单号抓取订单列表（获取多条详情再遍历）
     * @param int $accountId
     * @param array $simplelists
     * @return array
     * @author
     */
    public function spiderOrderListsCommon( $accountId, $simplelists) {

        $inserOrder = [];
        $orders = isset($simplelists) && !empty($simplelists)? $simplelists:$inserOrder;
        foreach ($orders as $order) {
            $vovaOrderId = isset($order['order_goods_sn'])?$order['order_goods_sn']:array();
            if (empty($vovaOrderId)) {
                continue;
            }

            $orderInfo = VovaOrderModel::where(['order_goods_sn' => $vovaOrderId,'account_id'=>$accountId])->find();

            //订单表数据
            $order_data = array(
                'id'                  => $orderInfo ? $orderInfo['id'] : 0,
                'account_id'   =>  $accountId,
                'order_sn'            => $order['order_sn'],  //订单号
                'order_goods_sn'        =>$vovaOrderId,  //订单号
                 'sku'               =>$order['sku'],//sku
                'website_goods_id'=>$order['website_goods_id'],//商品号
                'goods_name'        =>$order['goods_name'],//商品名称
                'goods_size'        =>$order['goods_size'],//尺寸
                'goods_color'       =>$order['goods_color'],//颜色
                'styles'           =>$order['styles'],//类型
                'goods_number'     =>$order['goods_number'],//数量
                'shop_price'        => $order['shop_price'], //商品价钱
                'shop_price_amount'=>$order['shop_price_amount'],//商品总价钱
                'shipping_fee'      =>$order['shipping_fee'],//运费
                'total_amount'        => $order['total_amount'], //订单总价钱
                'currency'             => $order['currency'], //货币类型
                'address'  => json_encode($order['address']), //收货人地址json格式
                'delivery_deadline'=>strtotime($order['delivery_deadline']),//发货时间
                'order_cancel_deadline'        => strtotime($order['order_cancel_deadline']), //取消时间
                'order_state'  => $order['order_state'], //订单状态0,未确认1,已确认2,已取消
                'shipping_state'           => $order['shipping_state'], //订单状态     0.未发货 1.已发货 2.已收货
                'image_url'             => $order['image_url'], //图片url
                'create_time'        => time(), //入库的时间
                'tracking_number'        =>'', //入库的时间
                'confirm_time'   =>strtotime($order['confirm_time']),//确认时间

            );
            //组装数据
            $inserOrder[] = array(
                'order' => $order_data,
            );
        }
        return $inserOrder;

    }



    /**
     * 对象转为数组
     * @param object $array
     * @return array
     * @author czq
     */
    function object_array($array) {

        if (is_object($array)) {
            $array = (array) $array;
        }
        if (is_array($array)) {
            foreach ($array as $key => $value) {
                $array[$key] = $this->object_array($value);
            }
        }
        return $array;

    }

    /**
     * 取订单列表
     * @param unknown $accountId
     * @param unknown $startTime
     * @param unknown $endtime
     */
    public function getVovaOrderList($accountId,$type) {
        $simplelists = $this->getOrderLists($accountId,$type);
        $orders = $this->spiderOrderListsCommon( $accountId,$simplelists);
        return $orders;
    }

    /**
     * 取订单列表
     * @param unknown $accountId
     * @param unknown $startTime
     * @param unknown $endtime
     */
    public function getVovaPress() {
        $response = Curl::curlGet('https://merchant-api.vova.com.hk/v1/order/ShippingCarrierList?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1MzQ3NTI1MDgsInNjb3BlIjpbImdldCIsInBvc3QiXSwidWlkIjoiMzUxNyIsInVOYW1lIjoieHVlbGkifQ.s4tlK1LtXRtBPzus1OwsCzuYVBwirkbjQ85MiR-CdYw');
        $rs= json_decode($response, true);
        foreach ($rs['data'] as $carrier){
            $data[]=[
                'carrier_id'=>$carrier['carrier_id'],
                'shipping_carrier'=>$carrier['carrier_name']."(".$carrier['display_name'].")",
                'description'=>$carrier['display_name'],
                'carrier_url'=>$carrier['carrier_url'],
                'created_time'=>time(),
            ];
        }

        return $data;
    }

    /** 发货订单
     * @param $order_id 订单ID
     * @param $items 订单商品总数量
     * @param $trackingInfo 跟踪提供商信息【shipDateTime-发货时间,carrier：快递商,methodCode：运输方法，trackingNumber：追踪号，trackingURL：查快递的链接】
     * @param $isOtherCarrier 是否为cd平台快递商
     * @return bool
     */
    public function fulfillOne($order_id, $trackingNumber, $second=0)
    {
        error_reporting(-1);
        //获取交易号
        $share_params = array(
            'token'=>$this->app_secret,
            'order_goods_sn' =>$order_id,
            'tracking_number' => $trackingNumber['trackingNumber'],
            'carrier_id' => $trackingNumber['carrier'],
        );
        if ($this->app_secret == null ) {
            $this->error = "vova token bad";
            return false;
        }
        
        $reqAgain = true;//标记是否再次请求
        $reqCount = 0;//请求次数计数
        $reqMax = 20;//请求最大次数
        while ($reqAgain){
            $reqAgain = false;
            $reqCount++;
            if ($second){
                $response = Curl::curlPost('https://merchant-api.vova.com.hk/v1/order/ModifyTracking',http_build_query($share_params),'');
            }else {
                $response = Curl::curlPost('https://merchant-api.vova.com.hk/v1/order/Ship',http_build_query($share_params),'');
            }
            $rs=json_decode($response,true);
            
            //错误日志
            $log_arr = [
                'account'=>$this->account,
                'share_params'=>$share_params,
                'response'=>$response,
                'rs'=>$rs
            ];
            
            //json解析失败
            if(!is_array($rs)){
                //请求被限制，等1秒再请求
                if(preg_match('/Too many requests/i',$response) && $reqCount <= $reqMax){
                    $reqAgain = true;
                    sleep(1);
                    continue;
                }
                $this->error = $response ?? '标记发货失败';
                //记录错误日志
                $this->errorLog($order_id, $log_arr);
                return false;
            }
            
            //json解析成功
            if(isset($rs['code']) && $rs['code']==20000){
                return true; //成功
            }else{
                if(preg_match('/退款/',$rs['msg'])){
                    $remark = '订单标记发货失败: 该订单已发起退款或已退款';
                    $id = Db::table('order')->where(['channel_id'=>ChannelAccountConst::channel_Vova,'channel_order_number'=>$order_id])->value('id');
                    if (!empty($id)){
                        (new UniqueQueuer(ChangeOrderStatusByVova::class))->push(['order_id' => $id.'|', 'reason' => $remark]);
                    }
                }
                $this->error = $rs['msg']??'标记发货失败';
                //记录错误日志
                $this->errorLog($order_id, $log_arr);
                return false;
            }
        }
    }
    
    /**
     * @desc 记录错误日志
     * @author wangwei
     * @date 2019-3-13 12:37:35
     * @param string $order_id
     * @param array $log_arr
     */
    public function errorLog($order_id,$log_arr){
        Cache::handler()->hSet('hash:VovaOrderfulfillOne', $order_id, json_encode($log_arr));
    }
    
}
