<?php

namespace paytm;

use app\common\cache\Cache;
use app\common\model\paytm\PaytmAccount as PaytmAccountModel;

/**
 * Created by PhpStorm.
 * User: libaimin
 * Date: 2018/5/21
 * Time: 14:15
 */
class PaytmAccountApi extends PaytmBaseApi
{
    protected $email = '';
    protected $merchant_id = '';
    protected $lmd_enabled = ''; //是否为LMD商人
    public function __construct($params = [])
    {
        parent::__construct($params);
        $this->email = $params['email']?? '';
        $this->merchant_id = $params['merchant_id']?? '';
        $this->lmd_enabled = $params['lmd_enabled']?? '';
    }

    /**
     * 读取access_token;
     * @return mixed
     */
    public function get_access_token()
    {
        $this->getAuthorizationCode();
        $url = 'https://persona.paytm.com/oauth2/token';
        $postData = array(
            'grant_type' => 'authorization_code',
            'code' => $this->code,
            'client_id' => $this->client_id,
            'client_secret' => $this->client_secret,
        );
        if ($this->state) {
            $postData['state'] = $this->state;
        }
        $postData = http_build_query($postData);
        $result = $this->httpReader($url, 'POST', $postData);
        return json_decode($result, true);
    }

    /**
     * 读取code;
     * @return mixed
     */
    public function getAuthorizationCode()
    {
        $url = 'https://persona.paytm.com/oauth2/authorize';
        $postData = array(
            'response_type' => 'code',
            'client_id' => $this->client_id,
            'username' => $this->username,
            'password' => $this->password,
            'notredirect' => true,
        );
        if ($this->state) {
            $postData['state'] = $this->state;
        }
        if($this->email){
            $postData['username'] = $this->email;
        }

        $postData = http_build_query($postData);

        $result = $this->httpReader($url, 'POST', $postData);
        $result = json_decode($result, true);
        if (isset($result['code'])) {
            $this->code = $result['code'];
            $this->state = $result['state'];
            return true;
        }
        return false;
    }

    /**
     * @title 已经组装好了授权的；
     * @param $url 访问地焉
     * @param $mehod 访问方法'GET'， 'POST'
     * @param $data 数据；
     * @return mixed josn
     */
    protected function authcall($url, $mehod, $data = '', $extra='')
    {
        //授权信息；
        if (!$this->access_token) {
            $this->refresh_access_token();
        }

        $postData = http_build_query($data);
        $result = $this->httpReader($url, $mehod, $data, $extra);

        $result = json_decode($result, true);

        //此种情况为未授权, 未授权则先授权，再进行；
        if ($result['code'] == 1000 && $result['message'] == 'api.unauthorized') {
            //如果授权成功，则再取，如果刷新授权也不成功，直接返回接果；
            if ($this->refresh_access_token()) {
                return $this->authcall($url, $mehod, $data);
            }
        }

        return $result;
    }

    public function refresh_access_token($uid=0)
    {
        $cache = Cache::store('PaytmAccount');
        //如果account_id不为0，则去缓存看一下，是否更新了access_token;
        if ($this->account_id != 0) {
            $account = $cache->getTableRecord($this->account_id);
            //此种情况为已更新了access_token，直接返回继续使用就好了；
            if (isset($account['access_token']) && $account['access_token'] != $this->access_token) {
                $this->access_token = $account['access_token'];
                return true;
            }
        }
        //上述发现未利用refresh_token更新acess_token,那么需要加锁去更新，先声明KEY
        $refreshKey = 'RefreshToken:paytm_access_token-' . $this->account_id;
        try {
            if ($this->lock($refreshKey)) {
                if ($this->account_id != 0) {
                    $account = $cache->getTableRecord($this->account_id);
                    if (isset($account['access_token']) && $account['access_token'] != $this->access_token) {
                        $this->access_token = $account['access_token'];
                        $this->unlock($refreshKey);
                        return true;
                    }
                }

                $result = $this->get_access_token();
                if (isset($result['access_token'])) {
                    $data['access_token'] = $this->access_token = $result['access_token'];
                    $data['refresh_token'] = $this->refresh_token = $result['refresh_token'];
                    $data['expiry_time'] = strtotime($result['token_expiry_time']);
                    $data['client_id'] = $this->client_id;
                    $data['client_secret'] = $this->client_secret;
                    $data['email'] = $this->email;
                    $data['password'] = $this->password;
                    $data['paytm_enabled'] = 1;
                    $data['is_authorization'] = 1;
                    if(isset($this->mode))
                    {
                        $data['mode'] = $this->mode;
                    }
                    if($uid>0){
                        $data['updater_id'] = $uid;
                        $data['update_time'] = time();
                    }
                    PaytmAccountModel::update($data, ['id' => $this->account_id]);
                    foreach ($data as $key => $val) {
                        $cache->updateTableRecord($this->account_id, $key, $val);
                    }
                    $this->unlock($refreshKey);
                    return true;
                }
                $this->unlock($refreshKey);
                return false;
            }
        } catch (Exception $e) {
            $this->unlock($refreshKey);
            throw new Exception($e->getMessage());
        }
    }


    /**
     * task里面列新access_token
     * @param $params
     * @return array|bool|mixed
     */
    public function task_refresh_access_token($params)
    {

        if (!isset($params['expires_on'])) {
            return false;
        }
        //还剩1小时开始更新；
        if ($params['expires_on'] > (time() - 3600)) {
            //已过期了
            $this->client_id = $params['client_id'];
            $this->client_secret = $params['client_secret'];
            $this->account_id = $params['id'];
            return $this->get_access_token();
        }
        return ['state' => true];
    }


}