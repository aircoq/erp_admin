<?php

namespace joom;

use app\common\cache\Cache;
use joom\JoomBaseApi;

/**
 * Created by PhpStorm.
 * User: libaimin
 * Date: 2018/1/6
 * Time: 17:25
 */
class JoomOrdersApi extends JoomBaseApi
{
    public function __construct($params)
    {
        parent::__construct($params);
    }

    /**
     * @title 返回当前需要完成的所有订单。
     * @param $start 开始点最小为0；
     * @param $limit 每次拉取的个数；
     * @param $since 开始时间；
     * @return mixed
     */
    public function getOrderList($start, $limit = 200, $since = '2018-05-01')
    {
        $url = 'https://api-merchant.joom.com/api/v2/order/get-fulfill';
        $getData = [
            'start' => $start,
            'limit' => $limit,
        ];
        if (!empty($since)) {
            $getData['since'] = is_numeric($since) ? date('Y-m-d H:i:s', $since) : $since;
        }

        $result = $this->authcall($url, 'GET', $getData);
        return $result;
    }


    /**
     * 检索最近更改的订单
     * @param $start 开始点最小为0；
     * @param $limit 每次拉取的个数；
     * @param $since 开始时间；
     * @return mixed
     */
    public function getOrders($start, $limit = 200, $since = '2018-05-01')
    {
        $url = 'https://api-merchant.joom.com/api/v2/order/multi-get';
        $getData = [
            'start' => $start,
            'limit' => $limit,
            'since' => $since,
        ];

        $result = $this->authcall($url, 'GET', $getData);
        if ($result['code'] == 0) {
            return $result['data'];
        }
        return false;

    }

    /**
     * 通过订单ID，拿取订单信息用于更新；
     * @param $order_id 订单ID
     */
    public function getOrdersById($order_id)
    {
        $url = 'https://api-merchant.joom.com/api/v2/order';
        $data = [
            'id' => $order_id,
        ];
        $result = $this->authcall($url, 'GET', $data);
        return $result;
    }

    /** 发货订单
     * @param $order_id 订单ID
     * @param $shipping_time 海运时间
     * @param $tracking_provider 跟踪提供商
     * @param $tracking_number 跟踪号
     * @param $ship_note 单号备注
     * @return bool
     */
    public function fulfillOne($order_id, $tracking_provider, $tracking_number = '', $ship_note = '', $shipping_time = 5)
    {
//        $url = 'https://api-merchant.joom.com/api/v2/fulfill-one';
        $url = 'https://api-merchant.joom.com/api/v2/order/fulfill-one';
        $data = [
            'id' => $order_id,
            'shipping_time' => $shipping_time,
        ];
        if ($tracking_provider) {
            $data['tracking_provider'] = $tracking_provider;
        }
        if ($tracking_number) {
            $data['tracking_number'] = $tracking_number;
        }
        if ($ship_note) {
            $data['ship_note'] = $ship_note;
        }
        $data = http_build_query($data);
        $result = $this->authcall($url, 'POST', $data);

        return $result;
    }

    /**
     * 订单退款
     * @param $order_id 订单ID
     * @param $reason_code 退款代码 1--店无法履行订单 2--产品缺货 3--客户提供错误地址信息
     * @return bool
     */
    public function refund($order_id, $reason_code)
    {

        $url = 'https://api-merchant.joom.com/api/v2/refund';
        $data = [
            'id' => $order_id,
            'reason_code' => $reason_code,
        ];

        $result = $this->authcall($url, 'GET', $data);
        return $result;
    }

    /**
     * 抓取一段时间内的订单的列表
     * @param datetime $starttime
     * @param datetime $endtime
     * @return array
     *
     */
    public function getOrderLists($startTime, $endTime)
    {
        $allResponse = array();
        $limit = 200;
        $outTime = 0;
        $whileIndex = 0;
        $nextOrders = [];
        do {
            #########################   分页抓取   start  ################################
            $nextOrders = $this->getOrders($limit * $whileIndex, $limit, $startTime);
            if (!$nextOrders) {
                break;
            }
            foreach ($nextOrders as $item) {
                $outTime = strtotime($item['Order']['order_time']);
                if ($endTime > $outTime) {
                    $allResponse[] = $item;
                } else {
                    break(2);
                }
            }
            $allcount = count($nextOrders);

            $whileIndex++;
            #########################   分页抓取  end   ##################################
        } while ($nextOrders && $endTime > $outTime && $allcount == $limit);
        return $allResponse;
    }


    /**
     * 提交线上发货请求
     * @param array $order_ids
     * @param string $ship_note
     * @param string $tracking_provider
     * @return mixed
     */
    public function fulfillOnline($param)
    {
        $url = 'https://api-merchant.joom.com/api/v2/order/fulfill-online';
        $data['tracking_provider'] = $param['tracking_provider']??'';
        if(isset($param['warehouse_id'])){
            $data['pickup'] = $param['pickup'];
            $data['warehouse_id'] = $param['warehouse_id'];
        }

        $data['fix_weight'] = 'true';
        if(isset($param['ship_note'])){
            $data['ship_note'] = $param['ship_note'];
        }
        $order_ids= $param['joomOrderIds']??array();
        $strData = '';
        foreach ($order_ids as $v){
            $strData .= 'ids='. $v . '&';
        }
        $strData .= http_build_query($data);
        $result = $this->authcall($url, 'post', $strData);
        return $result;
    }

    /**
     * 更新已发货的订单的 跟踪单号 物流商
     * @param string $order_ids
     * @param string $tracking_number
     * @param string $tracking_provider
     * @return array
     *
     */
    public function updateOrderTracking($order_ids = '', $tracking_number = '', $tracking_provider = 'Joom Logistics')
    {

        $url = 'https://api-merchant.joom.com/api/v2/order/modify-tracking';
        $data = [
            'id' => $order_ids,
            'tracking_number' => $tracking_number,
            'fix_weight' => 'true',
        ];

        if($tracking_provider){
            $data['tracking_provider'] = $tracking_provider;
        }

        $data = http_build_query($data);
        $result = $this->authcall($url, 'POST', $data);
        return $result;
    }

    /**
     * 获取订单面单
     * @param $order_id 订单ID
     * @return bool
     */
    public function shippingLabel($order_id)
    {

        $url = 'https://api-merchant.joom.com/api/v2/order/shipping-label';
        $data = [
            'id' => $order_id,
        ];
        //授权信息；
        $extra = [
            'header' => [
                'Authorization' => 'Bearer '. $this->access_token,
            ]
        ];

        $result = $this->httpReader($url, 'GET', $data,$extra);
        return $result;
    }


}