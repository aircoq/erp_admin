<?php
// +----------------------------------------------------------------------
// | 邮件接收类
// +----------------------------------------------------------------------
// | File  : Email.php
// +----------------------------------------------------------------------
// | Author: LiuLianSen <3024046831@qq.com>
// +----------------------------------------------------------------------
// | Date  : 2017-07-19
// +----------------------------------------------------------------------
namespace imap;

use PhpImap\Mailbox;
use PhpImap\IncomingMail;
use PhpImap\IncomingMailAttachment;
use \Exception as Exception;

class MailReceiver extends Mailbox{
    /**
     * @var MailReceiver
     */
    static protected $instance = null;

    /**
     * @var EmailAccount
     */
    protected $account= null;

    /**
     *  获取单例，
     *  但是因为集成父类构造函数不能变成私有，
     *  所以这里只是象征意义的提供一个方法
     * @return MailReceiver
     */
    static public function getInstance()
    {
        if(static::$instance === null) {
            static::$instance = new self();
        }
        return static::$instance;
    }

    public static $syncingEmailAccount = '';
    public static $isError = false;
    public static $lastError = '';

    /**
     *
     */
    public static function reSetSendStatus()
    {
        static::$syncingEmailAccount = '';
        static::$isError = false;
        static::$lastError = '';
    }


    public static function error_hanler($errno, $errstr, $errfile = '', $errline = 0)
    {
        static::$isError   = true;
        static::$lastError = $errstr;
    }


    /**
     * ImapMailBox constructor.
     * @param EmailAccount $account
     */
    public function __construct(EmailAccount $account = null)
    {
        if($account) {
            $this->setEmailAccount($account);
        }
        //thinkphp的error处理时间会抛出无法捕获的Fatal error,会导致整个任务死掉
        //重新注册一个自己的处理
        set_error_handler([__CLASS__,'error_hanler']);
    }

    /**
     * @param EmailAccount $account
     * @param string $encoding
     */
    public function setEmailAccount(EmailAccount $account,$encoding = 'UTF-8')
    {
        static::reSetSendStatus();
        if($this->getImapStream(false)){
            $this->disconnect();
        }
        $this->account = $account;
        $this->setImapPath($account->getImapServPath().$account->getMailBox());
        $this->setLoginUser($account->getEmailAccount());
        $this->setPassWord($account->getEmailPassWord());
        $this->serverEncoding = $encoding;
        static::$syncingEmailAccount = $account->getEmailAccount();
    }


    public function getImapPath()
    {
        return $this->imapPath;
    }

    public function setImapPath($imapPath) {
        $this->imapPath = $imapPath;
    }


    /**
     * @param $user
     */
    public function setLoginUser($user)
    {
        $this->imapLogin = $user;
    }

    /**
     * @param $passWord
     */
    public function setPassWord($passWord)
    {
        $this->imapPassword = $passWord;
    }

    /**
     * @param $emailId
     * @return string
     * @throws Exception
     */
    public function getEmailAttachmentsDir($emailId)
    {
        $dir = $this->account->getAttachmentsRootPath() . $emailId;
        if(!is_dir($dir) && !mkdir($dir, 0777 ,true)) {
            throw new Exception('邮件附件目录创建失败');
        }
        return $dir;
    }

    /**
     * @param string $box
     * @return array
     */
    public function getListingFolders($box = '') {
        $boxPath = $this->account->getImapServPath() . ($box ? $box: '');
        $folders = imap_list($this->getImapStream(), $boxPath , "*");
        foreach ($folders as $key => $folder)
        {
            if (function_exists('mb_convert_encoding')) {
                $folder = str_replace($this->imapPath, "", mb_convert_encoding($folder, "UTF-8", "UTF7-IMAP"));
            } else {
                $folder = str_replace($this->imapPath, "", imap_utf7_decode($folder));
            }
            $folders[$key] = $folder;
        }
        return $folders;
    }


    /**
     * @param $mailId
     * @param bool $markAsSeen
     * @return bool|Mail
     */
    public function getMail($mailId, $markAsSeen = true) {
        $mail = new Mail();
        $headersRaw = imap_fetchheader($this->getImapStream(), $mailId, FT_UID);
        $head = imap_rfc822_parse_headers($headersRaw);
        $mail->mailTime = strtotime($head->date)?: time();
        $mail->headersRaw = $headersRaw;
        $mail->headers = $head;
        $mail->id = $mailId;
        $mail->date = date('Y-m-d H:i:s', isset($head->date) ? strtotime(preg_replace('/\(.*?\)/', '', $head->date)) : time());
        $mail->subject = isset($head->subject) ? $this->decodeMimeStr($head->subject, $this->serverEncoding) : null;
        $mail->fromName = isset($head->from[0]->personal) ? $this->decodeMimeStr($head->from[0]->personal, $this->serverEncoding) : null;
        $mail->fromAddress = strtolower($head->from[0]->mailbox . '@' . $head->from[0]->host);
        if(isset($head->to)) {
            $toStrings = array();
            foreach($head->to as $to) {
                if(!empty($to->mailbox) && !empty($to->host)) {
                    $toEmail = strtolower($to->mailbox . '@' . $to->host);
                    $toName = isset($to->personal) ? $this->decodeMimeStr($to->personal, $this->serverEncoding) : null;
//                    $toStrings[] = $toName ? "$toName <$toEmail>" : $toEmail;
                    $toStrings[] = $toEmail ? $toEmail : $toName;
                    $mail->to[$toEmail] = $toName;
                }
            }
            $mail->toString = implode(', ', $toStrings);
        }

        if(isset($head->cc)) {
            foreach($head->cc as $cc) {
                $mail->cc[strtolower($cc->mailbox . '@' . $cc->host)] = isset($cc->personal) ? $this->decodeMimeStr($cc->personal, $this->serverEncoding) : null;
            }
        }

        if(isset($head->bcc)) {
            foreach($head->bcc as $bcc) {
                $mail->bcc[strtolower($bcc->mailbox . '@' . $bcc->host)] = isset($bcc->personal) ? $this->decodeMimeStr($bcc->personal, $this->serverEncoding) : null;
            }
        }

        if(isset($head->reply_to)) {
            foreach($head->reply_to as $replyTo) {
                $mail->replyTo[strtolower($replyTo->mailbox . '@' . $replyTo->host)] = isset($replyTo->personal) ? $this->decodeMimeStr($replyTo->personal, $this->serverEncoding) : null;
            }
        }

        if(isset($head->message_id)) {
            $mail->messageId = $head->message_id;
        }

        $mailStructure = imap_fetchstructure($this->getImapStream(), $mailId, FT_UID);

        if(empty($mailStructure->parts)) {
            $this->initMailPart($mail, $mailStructure, 0, $markAsSeen);
        }
        else {
            foreach($mailStructure->parts as $partNum => $partStructure) {
                if($partStructure->type == TYPETEXT){
                    $this->initMailPart($mail, $partStructure, $partNum + 1, $markAsSeen);
                }else{
                    $mail->addAttachmentsStructurePort($partNum + 1,$partStructure);
                }
            }
        }
        //如果是有效邮件,再获取附件
        if($this->account->getPlatform()->isFromThisPlatform($mail)){
            $mail->fetchPlatformInfo($this->account->getPlatform());
            foreach ($mail->getAttachmentsStructurePorts() as $port){
                $this->initMailPart($mail, $port[1], $port[0], $markAsSeen);
            }
            return $mail;
        }
        return false;
    }


    /**
     * @param IncomingMail $mail
     * @param $partStructure
     * @param $partNum
     * @param bool $markAsSeen
     * @override
     */
    protected function initMailPart(IncomingMail $mail, $partStructure, $partNum, $markAsSeen = true) {
        $options = FT_UID;
        if(!$markAsSeen) {
            $options |= FT_PEEK;
        }
        $data = $partNum ? imap_fetchbody($this->getImapStream(), $mail->id, $partNum, $options) : imap_body($this->getImapStream(), $mail->id, $options);

        if($partStructure->encoding == 1) {
            $data = imap_utf8($data);
        }
        elseif($partStructure->encoding == 2) {
            $data = imap_binary($data);
        }
        elseif($partStructure->encoding == 3) {
            $data = preg_replace('~[^a-zA-Z0-9+=/]+~s', '', $data); // https://github.com/barbushin/php-imap/issues/88
            $data = imap_base64($data);
        }
        elseif($partStructure->encoding == 4) {
            $data = quoted_printable_decode($data);
        }

        $params = array();
        if(!empty($partStructure->parameters)) {
            foreach($partStructure->parameters as $param) {
                $params[strtolower($param->attribute)] = $param->value;
            }
        }
        if(!empty($partStructure->dparameters)) {
            foreach($partStructure->dparameters as $param) {
                $paramName = strtolower(preg_match('~^(.*?)\*~', $param->attribute, $matches) ? $matches[1] : $param->attribute);
                if(isset($params[$paramName])) {
                    $params[$paramName] .= $param->value;
                }
                else {
                    $params[$paramName] = $param->value;
                }
            }
        }

        // attachments
        $attachmentId = $partStructure->ifid
            ? trim($partStructure->id, " <>")
            : (isset($params['filename']) || isset($params['name']) ? mt_rand() . mt_rand() : null);

        // ignore contentId on body when mail isn't multipart (https://github.com/barbushin/php-imap/issues/71)
        if (!$partNum && TYPETEXT === $partStructure->type)
        {
            $attachmentId = null;
        }

        if($attachmentId) {
            if(empty($params['filename']) && empty($params['name'])) {
                $fileName = $attachmentId . '.' . strtolower($partStructure->subtype);
            }
            else {
                $fileName = !empty($params['filename']) ? $params['filename'] : $params['name'];
                $fileName = $this->decodeMimeStr($fileName, $this->serverEncoding);
                $fileName = $this->decodeRFC2231($fileName, $this->serverEncoding);
            }
            $attachment = new IncomingMailAttachment();
            $attachment->id = $attachmentId;
            $attachment->name = $fileName;
            $attachment->disposition = (isset($partStructure->disposition) ? $partStructure->disposition : null);
            $attachment->filePath =  $this->getEmailAttachmentsDir($mail->id).DIRECTORY_SEPARATOR. $fileName;
            if(strlen($attachment->filePath) > 255) {
                $ext = pathinfo($attachment->filePath, PATHINFO_EXTENSION);
                $attachment->filePath = substr($attachment->filePath, 0, 255 -1 -strlen($ext)).".".$ext;
            }
            file_put_contents($attachment->filePath, $data);
            $mail->addAttachment($attachment);
        }
        else {
            if(!empty($params['charset'])) {
                $data = $this->convertStringEncoding($data, $params['charset'], $this->serverEncoding);
            }
            if($partStructure->type == 0 && $data) {
                if(strtolower($partStructure->subtype) == 'plain') {
                    $mail->textPlain .= $data;
                }
                else {
                    $mail->textHtml .= $data;
                }
            }
            elseif($partStructure->type == 2 && $data) {
                $mail->textPlain .= trim($data);
            }
        }
        if(!empty($partStructure->parts)) {
            foreach($partStructure->parts as $subPartNum => $subPartStructure) {
                if($partStructure->type == 2 && $partStructure->subtype == 'RFC822') {
                    $this->initMailPart($mail, $subPartStructure, $partNum, $markAsSeen);
                }
                else {
                    $this->initMailPart($mail, $subPartStructure, $partNum . '.' . ($subPartNum + 1), $markAsSeen);
                }
            }
        }
    }
}