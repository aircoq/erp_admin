<?php
/**
 * Created by NetBeans.
 * User: joy
 * Date: 2017-3-15
 * Time: 上午10:19
 */

namespace app\publish\service;

use app\common\cache\Cache;
use app\common\model\GoodsGallery;
use app\common\model\GoodsTortDescription;
use app\common\model\Goods;
use app\common\model\Brand;
use app\common\model\GoodsLang;
use app\common\model\GoodsPublishMap;
use think\Exception;
use app\goods\service\GoodsImage;
use think\exception\DbException;
use app\common\model\GoodsDiscount;
use app\goods\service\GoodsHelp as GoodsHelpService;
use erp\AbsServer;

/**
 * @node lazada刊登助手
 * Class LazadaPublishHelper
 * packing app\publish\service
 */
class LazadaPublishHelper extends AbsServer
{
    /**
     * @title 未刊登列表
     * @param array $params
     * @param $page
     * @param $pageSize
     * @return array
     * @throws DbException
     * @throws Exception
     * @throws \think\db\exception\DataNotFoundException
     */
    public function getUnpublishedListByChannelId(array $params,$page, $pageSize)
    {
        $where = [];
        $join = [];
        $channel_id = empty($params['channelId']) ? 6 : $params['channelId'];//默认lazada
        $channel_id = 3;//测试用

        $fields='distinct(m.goods_id),g.developer_id,m.publish_status,m.platform_sale,m.spu,g.thumb,g.category_id,g.name,g.publish_time,g.packing_name name_cn, g.packing_en_name, g.warehouse_id';

        $where['channel_id'] = ['eq', $channel_id];
        $where['g.sales_status'] = ['IN', array(1,4,6)];
        $post = $params;
        if (isset($post['snType']) && $params['snType'] == 'spu' && $post['snText']) {
            $where['m.' . $post['snType']] = array('IN', $post['snText']);
        }

        if (isset($post['snType']) && $post['snType'] == 'id' && $post['snText']) {
            $where['m.goods_id'] = array('eq', $post['snText']);
        }

        if (isset($post['snType']) && $post['snType'] == 'name' && $post['snText']) {
            $where['name'] = array('like', '%' . $post['snText'] . '%');
        }
        if (isset($post['snType']) && $post['snType'] == 'alias' && $post['snText']) {
            $where['alias'] = array('like', '%' . $post['snText'] . '%');
        }

        if (isset($post['snType']) && $post['snType'] == 'sku' && $post['snText']) {
            $where['sku'] = array('IN', $post['snText']);
            $join[] = ['goods_sku gs','gs.goods_id=g.id'];
        }

        if (isset($post['developer_id']) && $post['developer_id'] ) {
            $where['g.developer_id'] = array('=', $post['developer_id']);
        }

        if (isset($post['category_id']) && $post['category_id'] ) {
            $category_id = (int)$post['category_id'];

            $categories = CommonService::getSelfAndChilds($category_id);

            $where['g.category_id'] = array('IN', $categories);
        }
        if (!empty($post['warehouse_id'])) {//仓库
            $where['g.warehouse_id'] = $post['warehouse_id'];
        }

        if (isset($post['accountVal']) && is_numeric($post['accountVal'])) {
            $map = " JSON_SEARCH(m.publish_status,'one', " . $post['accountVal'] . ") IS NULL ";
        } elseif(isset($post['account_id']) && is_numeric($post['account_id'])){
            $map = " JSON_SEARCH(m.publish_status,'one', " . $post['account_id'] . ") IS NULL ";
        }else {
            $map = [];
        }


        if(!empty($join))
        {
            $count = (new GoodsPublishMap())->alias('m')
                ->join('goods g', 'm.goods_id=g.id', 'LEFT')
                ->join($join)
                ->where($where)->where($map)->count('m.id');

            $data = (new GoodsPublishMap())->alias('m')
                ->join('goods g', 'm.goods_id=g.id', 'LEFT')
                ->join($join)
                ->order('publish_time desc')->field($fields)->where($map)->where($where)->page($page, $pageSize)->select();

        }else{
            $count = (new GoodsPublishMap())->alias('m')->join('goods g', 'm.goods_id=g.id', 'LEFT')->where($where)->where($map)->count('m.id');

            $data = (new GoodsPublishMap())->order('publish_time desc')->field($fields)->alias('m')->join('goods g', 'm.goods_id=g.id', 'LEFT')->where($map)->where($where)->page($page, $pageSize)->select();
        }
        $goodsModel = new Goods();
        $discountIds = [];
        if ($data) {
            $data = collection($data)->toArray();
            $goodsIds = array_column($data,'goods_id');
            $tortGoodsIds = GoodsTortDescription::distinct(true)->whereIn('goods_id',$goodsIds)->column('goods_id');
            //获取降价ids
            $discountIds = (new GoodsDiscount())->whereIn('goods_id',$goodsIds)->where('valid_time','<',time())->where('over_time','>',time())->where('status',1)->column('goods_id');
        }
        $goodsHelp = new GoodsHelpService();
        foreach ($data as $k => &$d) {
//            if(!$goodsHelp->getPlatformForChannel($d['goods_id'],$channel_id)){//该平台是否可售
//                unset($data[$k]);
//            }else{
                $d['id'] = $d['goods_id'];
                $d['tort_flag'] = in_array($d['goods_id'],$tortGoodsIds) ? 1 : 0;//侵权
                $category = $goodsModel->getCategoryAttr("",$d);
                if($category)
                {
                    $d['category'] = $category;
                }else{

                    $d['category'] = '';
                }

                $lang = GoodsLang::where(['goods_id' => $d['goods_id'], 'lang_id' => 2])->field('title')->find();

                if ($lang) {
                    $d['packing_en_name'] = $lang['title'];
                }

                $d['thumb'] = GoodsImage::getThumbPath($d['thumb'], 60, 60);

                $d['is_discounting'] = in_array($data[$k]['goods_id'],$discountIds) ? 1 : 0;
//            }
        }

        return ['data' => array_values($data), 'count' => $count, 'page' => $page, 'pageSize' => $pageSize];
    }

    /**
     * @title 根据商品id获取商品信息
     * @param int $goodsId
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws DbException
     * @throws Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function GetProductInfoByGoodId(int $goodsId)
    {
        $arrGoodsField = [
            'p1.id',//商品ID
            'p1.name',//产品名称
            'p1.packing_en_name',//英文名称
            'p1.spu',//SPU
            'p1.category_id',//本地分类ID
            'p1.weight',//重量(g)
            'p1.width',//宽度(mm)
            'p1.height',//高度(mm)
            'p1.depth',//'深度(mm)'
            'p1.warehouse_id',//默认发货仓库ID
            'p1.brand_id goods_brand_id',
            //'p2.title',//'描述'
            //'p2.description',//'描述'
        ];
        $objGoods = Goods::where(['p1.id'=>$goodsId])
            ->field($arrGoodsField)
            ->alias('p1')
            ->find();

        if(empty($objGoods)){
            throw new Exception('商品不存在');
        }


        //是否平台侵权
        $goodsHelpService = new GoodsHelpService();
        $goods_tort = $goodsHelpService->getGoodsTortDescriptionByGoodsId($objGoods['id']);
        $objGoods['is_tort'] = $goods_tort ? 1 : 0;

        //物流属性
        $objGoods['transport_property'] = $goodsHelpService->getPropertiesTextByGoodsId($objGoods['id']);
        $objGoods = $objGoods->toArray();
        $goods_lang = GoodsLang::where(['goods_id'=>$goodsId,'lang_id'=>2])->field('title,description,selling_point')->find();

        $objGoods['title'] = '';
        $objGoods['description'] = '';
        $sellingPoint = '';
        if(!empty($goods_lang)){
            $objGoods['title'] = $goods_lang['title'];
            $objGoods['description'] = $goods_lang['description'];

            //获取产品卖点描述 //2英文;1.中文
            $goodsSellingPoint = \GuzzleHttp\json_decode($goods_lang['selling_point'],true);

            if($goodsSellingPoint){

                $i = 1;
                foreach ($goodsSellingPoint as $val){
                    if($val){
                        $sellingPoint.=$i.'、'.$val."\n";
                    }
                    $i++;
                }

                if($sellingPoint){
                    $sellingPoint = 'Bullet Points:'."\n".$sellingPoint."\n";
                }
            }
        }

        //卖点描述+描述
        $objGoods['description'] = $sellingPoint.CommonService::replaceDesriptionHtmlTags($objGoods['description']);

        $arrImgs = GoodsGallery::where(['goods_id'=>$goodsId])->field('path')->group('path')->select();

        if(!empty($arrImgs))
        {
            foreach ($arrImgs as &$img)
            {
                $img['path'] = \app\goods\service\GoodsImage::getImagePath($img['path']);
            }

        }

        $objGoods['imgs'] = $arrImgs;

        $objGoods['base_url']=Cache::store('configParams')->getConfig('innerPicUrl')['value'].DS;

        $goodsServer = $this->invokeServer(\app\goods\service\GoodsHelp::class);

        $objGoods['category_name'] = $goodsServer->mapCategory($objGoods['category_id']);




        $objGoods['goods_brand']='';
        if($objGoods['goods_brand_id'])
        {
            $brand = Brand::where('id',$objGoods['goods_brand_id'])->find();
            if($brand)
            {
                $objGoods['goods_brand']=$brand['name'];
            }
        }


        $objGoods['width']=$objGoods['width']/10;
        $objGoods['height']=$objGoods['height']/10;
        $objGoods['depth']=$objGoods['depth']/10;
        $objGoods['virtual_send'] = 0;
        $objGoods['region_group_id'] = '';
        $objGoods['region_template_id'] = '';
        $objGoods['is_market_image'] = 0;
        $objGoods['market_images'] = [];

        //分组模板
        return $objGoods;
    }

    /**
     *  根据spu获取sku的id
     * @param string $spu
     * @param $spu
     * @return string
     * @throws DbException
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function getGoodsSKuIdBySpu($spu)
    {
        $data = Goods::where(['spu' => $spu])->with(['sku'])->find();
        if ($data && is_object($data)) {
            $data = $data->toArray();
            if (count($data['sku']) == 1) {
                return $data['sku'][0]['id'];
            } else {
                return '';
            }
        } else {
            return '';
        }

    }





}
