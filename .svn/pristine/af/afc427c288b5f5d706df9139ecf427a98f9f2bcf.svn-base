<?php
/**
 * Created by PhpStorm.
 * User: joy
 * Date: 18-6-1
 * Time: 上午11:59
 */

namespace app\common\model\shopee;


use think\Db;
use think\Exception;
use think\exception\PDOException;
use think\Model;

class ShopeeDiscountDetail extends Model
{
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }
    public static function saveData($discount_id,$items){
        if($discount_id && $items){
            foreach ($items as $item){
                self::saveDetailData($discount_id,$item);
            }
        }
    }
    public static function saveDetailData($discount_id,$item)
    {
        if(isset($item['item_id']) && $item['item_id']){
            $where=[
                'discount_id'=>['=',$discount_id],
                'item_id'=>['=',$item['item_id']],
            ];
            $item['discount_id']=$discount_id;
            $variations=[];
            if(isset($item['variations']) &&  $item['variations']){
                $variations = $item['variations'];
                $item['variations']=json_encode($item['variations']);
            }else{
                $item['variations']=[];
            }

            $model = new self();
            $has = $model->where($where)->field('id')->find();
            Db::startTrans();
            try{
                if($has){
                    $model->allowField(true)->save($item,['id'=>$has['id']]);
                }else{
                    $model->allowField(true)->save($item);
                }
                $discount=[
                    'discount_id'=>$discount_id
                ];
                if($variations){
                    foreach ($variations as $variation){
                        ShopeeVariant::where('variation_id',$variation['variation_id'])->setField('discount_id',$discount_id);
                    }
                }
                ShopeeProduct::where('item_id',$item['item_id'])->setField('discount_id',$discount_id);
                Db::commit();
            }catch (PDOException $exp){
                Db::rollback();
                throw new Exception("{$exp->getMessage()}");
            }
        }
    }
}