<?php

namespace app\index\service;

use app\common\cache\Cache;
use app\common\controller\Base;
use app\common\model\fummart\FummartAccount as FunmartAccountModel;
use app\common\model\ChannelAccountLog;
use app\common\service\ChannelAccountConst;
use think\Db;
use think\Exception;
use app\index\service\AccountService;

/**
 * @title  Funmart账号管理
 * @module 账号管理
 * Class FunmartAccountService
 * Created by linpeng
 * updateTime: time 2019/3/14 13:51
 */
class FunmartAccountService extends Base
{
    /**
     * 日志配置
     * 字段名称[name] 
     * 格式化类型[type]:空 不需要格式化,time 转换为时间,list
     * 格式化值[value]:array
     */
    public static $log_config = [
        'sales_company_id' => ['name'=>'运营公司','type'=>null],
        'account_name' => ['name'=>'账号名','type'=>null],
        'code' => ['name'=>'账号简称','type'=>null],
        'secrect' => ['name'=>'商户Key','type'=>null],
        'appkey' => ['name'=>'商户ID','type'=>null],
        'token' => ['name'=>'商户token','type'=>null],
        'phone' => ['name'=>'商户电话','type'=>null],
        'email' => ['name'=>'商户邮箱','type'=>null],
        'status' => [
            'name'=>'系统状态',
            'type'=>'list',
            'value'=>[
                0 =>'停用',
                1 =>'使用' ,
            ],
        ],
        'is_invalid' => [
            'name'=>'系统invalid状态',
            'type'=>'list',
            'value'=>[
                0 =>'使用',
                1 =>'停用' ,
            ],
        ],
        'download_listing' => ['name'=>'抓取Listing数据时间','type'=>'time'],
        'download_health' => ['name'=>'同步健康数据','type'=>'time'],
        'download_order' => ['name'=>'抓取订单时间','type'=>'time'],
        'sync_delivery' => ['name'=>'同步发货状态时间','type'=>'time'],
        'sync_feedback' => ['name'=>'同步中差评时间','type'=>'time'],
        'site_status' => [
            'name'=>'账号状态',
            'type'=>'list',
            'value'=>[
                0 => '未分配',
                1 => '运营中',
                2 => '回收中',
                3 => '冻结中',
                4 => '申诉中',
            ]
        ],
    ];

    /**
     * 保存账号信息
     * @param $data
     * @return array|false|\PDOStatement|string|\think\Model
     * @throws Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function save($data)
    {

        $ret = [
            'msg' => '',
            'code' => ''
        ];
        $data['create_time'] = time();
        $data['update_time'] = time();
        $data['platform_status'] = 1;  //设置为有效
        $funmartModel = new FunmartAccountModel();
        Db::startTrans();
        $re = $funmartModel->where('code', $data['code'])->field('id')->find();
        if (count($re)) {
            $ret['msg'] = '账户名重复';
            $ret['code'] = 400;
            return $ret;
        }
        \app\index\service\BasicAccountService::isHasCode(ChannelAccountConst::channel_Fummart, $data['code']);
        try {

            $funmartModel->allowField(true)->isUpdate(false)->save($data);
            //获取最新的数据返回
            $new_id = $funmartModel->id;
            //删除缓存
            Cache::store('FunmartAccount')->delAccount();
            Db::commit();
        } catch (Exception $e) {
            Db::rollback();
            throw new Exception($e->getMessage(), 500);
        }
        $accountInfo = $funmartModel->field(true)->where(['id' => $new_id])->find();
        if (count($accountInfo)) {
            $ret['msg'] = 'success';
            $ret['code'] = 200;
            return $ret;
        }
    }

    /**
     * 切换账号状态
     * @param $data
     */
    public function changeStatus($data)
    {
        $model = new FunmartAccountModel();
        $accountInfo = $model->where('id', $data['id'])->find();
        if (!$accountInfo) {
            throw new Exception('该记录不存在');
        }
        $update_data = [];
        $update_data['status'] = $data['status'] == 1 ? 1 : 0;
        $update_data['updater_id'] = $data['updater_id'];

        $log_data = $update_data;

        $update_data['update_time'] = input('server.REQUEST_TIME');

        $model->allowField(true)->save($update_data, ['id' => $accountInfo->id]);

        $operator = [];
        $operator['operator_id'] = $data['updater_id'];
        $operator['operator'] = $data['realname'];
        $operator['account_id'] = $accountInfo->id;
        self::addFunmartLog($operator, 1, $log_data, $accountInfo);
        //删除缓存
        Cache::store('FunmartAccount')->delAccount();
        return ['message' => '修改成功'];
    }


    /**
     * 获取账号列表
     * lingjiawen
     */
    public function getList(array $req)
    {
        /**
         * 初始化参数
         */
        $operator = ['eq' => '=', 'gt' => '>', 'lt' => '<'];
        $page = isset($req['page']) ? intval($req['page']) : 1;
        $pageSize = isset($req['pageSize']) ? intval($req['pageSize']) : 50;
        $time_type = isset($req['time_type']) and in_array($req['time_type'],['register','fulfill']) ? $req['time_type'] : '';
        $start_time = isset($req['start_time']) ? strtotime($req['start_time']) : 0;
        $end_time = isset($req['end_time']) ? strtotime($req['end_time']) : 0;
        $site = $req['site'] ?? '';
        $status = isset($req['status']) && is_numeric($req['status']) ? intval($req['status']) : -1;
        $site_status = isset($req['site_status']) && is_numeric($req['site_status']) ? intval($req['site_status']) : -1;
        $seller_id = isset($req['seller_id']) ? intval($req['seller_id']) : 0;
        $customer_id = isset($req['customer_id']) ? intval($req['customer_id']) : 0;
        $is_authorization = isset($req['authorization']) && is_numeric($req['authorization']) ? intval($req['authorization']) : -1;
        $is_invalid = isset($req['is_invalid']) && is_numeric($req['is_invalid']) ? intval($req['is_invalid']) : -1;
        $snType = !empty($req['snType']) && in_array($req['snType'], ['account_name', 'code']) ? $req['snType'] : '';
        $snText = !empty($req['snText']) ? $req['snText'] : '';
        $taskName = !empty($req['taskName']) && in_array($req['taskName'], ['download_listing', 'download_order', 'sync_delivery', 'download_health']) ? $req['taskName'] : '';
        $taskCondition = !empty($req['taskCondition']) && isset($operator[trim($req['taskCondition'])]) ? $operator[trim($req['taskCondition'])] : '';
        $taskTime = isset($req['taskTime']) && is_numeric($req['taskTime']) ? intval($req['taskTime']) : '';

        /**
         * 参数处理
         */
        if ($time_type && $end_time && $start_time > $end_time) {
            return [
                'count' => 0,
                'data' => [],
                'page' => $page,
                'pageSize' => $pageSize,
            ];
        }
        !$page and $page = 1;
        if ($page > $pageSize) {
            $pageSize = $page;
        }

        /**
         * where数组条件
         */
        $where = [];
        $seller_id and $where['c.seller_id'] = $seller_id;
        $customer_id and $where['c.customer_id'] = $customer_id;
        $is_invalid >= 0 and $where['am.is_invalid'] = $is_invalid;
        $is_authorization >= 0 and $where['am.is_authorization'] = $is_authorization;
        $site and $where['am.site'] = $site;
        $status >= 0 and $where['am.status'] = $status;
        $site_status >= 0 and $where['s.site_status'] = $site_status;

        if ($taskName && $taskCondition && !is_string($taskTime)) {
            $where['am.' . $taskName] = [$taskCondition, $taskTime];
        }

        if ($snType && $snText) {
            $where['am.' . $snType] = ['like', '%' . $snText . '%'];
        }

        /**
         * 需要按时间查询时处理
         */
        if ($time_type) {
            /**
             * 处理需要查询的时间类型
             */
            switch ($time_type) {
                case 'register':
                    $time_type = 'a.register_time';
                    break;
                case 'fulfill':
                    $time_type = 'a.fulfill_time';
                    break;

                default:
                    $start_time = 0;
                    $end_time = 0;
                    break;
            }
            /**
             * 设置条件
             */
            if ($start_time && $end_time) {
                $where[$time_type] = ['between time', [$start_time, $end_time]];
            } else {
                if ($start_time) {
                    $where[$time_type] = ['>', $start_time];
                }
                if ($end_time) {
                    $where[$time_type] = ['<', $end_time];
                }
            }
        }

        $model = new FunmartAccountModel();
        $count = $model
            ->alias('am')
            ->join('__ACCOUNT__ a', 'a.id=am.base_account_id')
            ->join('__CHANNEL_USER_ACCOUNT_MAP__ c', 'c.account_id=am.id AND c.channel_id=a.channel_id', 'LEFT')
            ->join('__ACCOUNT_SITE__ s', 's.base_account_id=am.base_account_id', 'LEFT')
            ->where($where)
            ->count();

        //没有数据就返回
        if (!$count) {
            return [
                'count' => 0,
                'data' => [],
                'page' => $page,
                'pageSize' => $pageSize,
            ];
        }

        $field = 'am.id,am.base_account_id,am.name,am.account_name,am.code,am.secrect,am.appkey,am.token,am.phone,am.email,am.status,am.is_invalid,am.download_order,am.is_authorization,am.download_listing,am.sync_delivery,s.site_status,c.seller_id,c.customer_id,a.register_time,a.fulfill_time';
        //有数据就取出
        $list = $model
            ->alias('am')
            ->field($field)
            ->join('__ACCOUNT__ a', 'a.id=am.base_account_id')
            ->join('__CHANNEL_USER_ACCOUNT_MAP__ c', 'c.account_id=am.id AND c.channel_id=a.channel_id', 'LEFT')
            ->join('__ACCOUNT_SITE__ s', 's.base_account_id=am.base_account_id', 'LEFT')
            ->where($where)
            ->page($page, $pageSize)
            ->order('am.id DESC')
            ->select();

        foreach ($list as &$val) {
            $seller =  Cache::store('User')->getOneUser($val['seller_id']);
            $val['seller_name'] = $seller ? $seller['realname'] : '';
            $val['seller_on_job'] = $seller ? $seller['on_job'] : '';
            $customer = Cache::store('User')->getOneUser($val['customer_id']);
            $val['customer_name'] = $customer ? $customer['realname'] : '';
            $val['customer_on_job'] = $customer ? $customer['on_job'] : '';
        }

        return [
            'count' => $count,
            'data' => $list,
            'page' => $page,
            'pageSize' => $pageSize,
        ];
    }

    public function batchUpdate($data)
    {
        $updateData = [];
        isset($data['status']) && $updateData['status'] = intval($data['status']) ? 1 : 0;
        isset($data['download_listing']) && $updateData['download_listing'] = intval($data['download_listing']);
        isset($data['download_order']) && $updateData['download_order'] = intval($data['download_order']);
        isset($data['sync_delivery']) && $updateData['sync_delivery'] = intval($data['sync_delivery']);
        $updateData['updater_id'] = $data['user_id'];
        $updateData['update_time'] = time();

        $new_data = $updateData;
        $new_data['site_status'] = isset($data['site_status']) ? intval($data['site_status']) : '';

        $operator = [];
        $operator['operator_id'] = $data['user_id'];
        $operator['operator'] = $data['realname'];

        $model = new FunmartAccountModel();

        $idArr = array_merge(array_filter(array_unique(explode(',', $data['ids']))));

        $old_data_list = $model->where('id', 'in', $idArr)->select();

        $res = $model->allowField(true)->where('id', 'in', $idArr)->update($updateData);

        //删除缓存
        $cache = Cache::store('FunmartAccount');
        foreach ($old_data_list as $old_data) {
            if (in_array($new_data['site_status'], [1, 2, 3, 4])) {
                $old_data['site_status'] = AccountService::setSite(
                    ChannelAccountConst::channel_Fummart,
                    $old_data['base_account_id'],
                    $old_data['code'],
                    $operator['operator_id'],
                    $new_data['site_status']
                );
            }
            $operator['account_id'] = $old_data['id'];
            self::addFunmartLog(
                $operator,
                ChannelAccountLog::UPDATE,
                $new_data,
                $old_data
            );
            $cache->delAccount($old_data['id']);
        }
        return $new_data;
    }

    /**
     * 添加日志
     * @author lingjiawen
     */
    public static function addFunmartLog(array $base_info = [], int $type = 0, array $new_data = [], $old_data = []): void
    {
        $insert_data = [];
        $remark = [];
        if (ChannelAccountLog::INSERT == $type) {
            $insert_data = $new_data;
        }
        if (ChannelAccountLog::DELETE == $type) {
            $insert_data = (array)$old_data;
        }
        if (ChannelAccountLog::UPDATE == $type) {
            foreach ($new_data as $k => $v) {
                if (isset(self::$log_config[$k]) and isset($old_data[$k]) and $v != $old_data[$k]) {
                    $remark[] = ChannelAccountLog::getRemark(self::$log_config[$k], $type, $k, $v, $old_data[$k]);
                    $insert_data[$k] = $old_data[$k];
                }
            }
        }
        $insert_data and ChannelAccountLog::addLog([
            'channel_id' => ChannelAccountConst::channel_Fummart,
            'account_id' => $base_info['account_id'],
            'type' => $type,
            'remark' => json_encode($remark, JSON_UNESCAPED_UNICODE),
            'operator_id' => $base_info['operator_id'],
            'operator' => $base_info['operator'],
            'data' => json_encode($insert_data, JSON_UNESCAPED_UNICODE),
            'create_time' => input('server.REQUEST_TIME'),
        ]);
    }

    /**
     * 获取日志
     */
    public function getFunmartLog(array $req = [])
    {
        $page = isset($req['page']) ? intval($req['page']) : 1;
        $pageSize = isset($req['pageSize']) ? intval($req['pageSize']) : 10;
        $account_id = isset($req['id']) ? intval($req['id']) : 0;

        return (new ChannelAccountLog)->getLog(ChannelAccountConst::channel_Fummart, $account_id, true, $page, $pageSize);
    }
}
