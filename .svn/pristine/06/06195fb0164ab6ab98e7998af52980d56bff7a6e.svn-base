<?php namespace Waimao\AmazonMws;

use Waimao\AmazonMws\AmazonCore;

/**
 * Copyright 2013 CPI Group, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 *
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
use Exception;

/**
 * Core class for Amazon Products API.
 *
 * This is the core class for all objects in the Amazon Products section.
 * It contains a few methods that all Amazon Products Core objects use.
 */
abstract class AmazonSubscribeCore extends AmazonCore
{
    protected $productList;
    protected $index = 0;

    /**
     * AmazonProductsCore constructor sets up key information used in all Amazon Products Core requests
     *
     * This constructor is called when initializing all objects in the Amazon Products Core.
     * The parameters are passed by the child objects' constructors, which are
     * in turn passed to the AmazonCore constructor. See it for more information
     * on these parameters and common methods.
     * @param array $s <p>Store config array.</p>
     * @param boolean $mock [optional] <p>This is a flag for enabling Mock Mode.
     * This defaults to <b>FALSE</b>.</p>
     * @param array|string $m [optional] <p>The files (or file) to use in Mock Mode.</p>
     * @param string $config [optional] <p>An alternate config file to set. Used for testing.</p>
     */
    public function __construct($s, $mock = false, $m = null)
    {
        parent::__construct($s, $mock, $m);
        include($this->env);

        if (isset($AMAZON_VERSION_SUBSCRIPTIONS)) {
            $this->urlbranch = 'Subscriptions/' . $AMAZON_VERSION_SUBSCRIPTIONS;
            $this->options['Version'] = $AMAZON_VERSION_SUBSCRIPTIONS;
        }

        if (isset($s) && array_key_exists('marketplaceId', $s)) {
            $this->options['MarketplaceId'] = $s['marketplaceId'];
        } else {
            $this->log("Marketplace ID is missing", 'Urgent');
        }

        if (isset($s) && array_key_exists('sqsQueueUrl',$s)){

            $this->options['Destination.AttributeList.member.1.Key'] = 'sqsQueueUrl';
            $this->options['Destination.AttributeList.member.1.Value'] = $s['sqsQueueUrl'];
        }

        $this->options['Destination.DeliveryChannel'] = 'SQS';

        if (isset($THROTTLE_LIMIT_PRODUCT)) {
            $this->throttleLimit = $THROTTLE_LIMIT_PRODUCT;
        }
    }

    /**
     * Parses XML response into array.
     *
     * This is what reads the response XML and converts it into an array.
     * @param SimpleXMLObject $xml <p>The XML response from Amazon.</p>
     * @return boolean <b>FALSE</b> if no XML data is found
     */
    protected function parseXML($xml)
    {
        if (!$xml) {
            return false;
        }

        $RequestId = '';
        $isEnabled = true;
        foreach ($xml->children() as $val){
            $temp = (array)$val;

            if(isset($temp['Subscription'])){
                $sub = (array)$temp['Subscription']->children();

                if(isset($sub['IsEnabled']) && $sub['IsEnabled'] === false){
                    $isEnabled = false;
                }else{
                    if(isset($temp['RequestId']) && $temp['RequestId']){

                        $RequestId = $temp['RequestId'];
                    }
                }
            }else{
                if(isset($temp['RequestId']) && $temp['RequestId']){

                    $RequestId = $temp['RequestId'];
                }
            }
        }


        return $isEnabled ? $RequestId: '';
    }
}

?>
