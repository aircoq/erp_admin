<?php
namespace service\shipping\operation;

use app\carrier\service\PackageLabelFileService;
use app\common\cache\Cache;
use service\shipping\operation\Common;
use org\Xml;
use org\Curl;
/**
 *  Suitable 俄顺国际
 */
class Suitable
{
    // 配置信息   
    private $_config = [
        'url'   => 'http://120.26.82.200:8080/webservice/PublicService.asmx/ServiceEntrance',
        'header' => [
            
        ],
        'appToken' =>  '',
        'appKey'   =>  ''
//        'appToken' =>  'b788eab07fd68b305838a1c3bdf92fc8',
//        'appKey'   =>  '51dd20457638ebd4aea3f26dfe79a5e051dd20457638ebd4aea3f26dfe79a5e0'
    ];
    
    private $result        = [
            'data'    => [],
            'error'   => [],
            'success' => false
        ];
    /**
     * 组装header信息
     * @param array $config
     * @return array | void
     */
    private function formatHeader(array $config)
    {
        if (empty($config['accessToken'])  || empty($config['client_secret'])) {
            $this->result['error'] = [
                'error_msg'  => '账号授权信息缺失',
                'error_code' => 1
            ];
            return false;
        }
        $this->_config['appToken'] = $config['accessToken'];
        $this->_config['appKey']   = $config['client_secret'];
        return true;
    }
    
    /**
     * 获取下单报文信息在(/packages-error/error下调用)
     * @param array $order
     * @param $funName 方法名
     */
    public function message($order, $funName)
    {
        $result= $this->$funName($order);
        return  $result;
    }
    /**
     * 获取跟踪单号
     * @param string $reference_no 包裹号， refNo号
     * @return $result ： 结果信息数组
     */
    public function getTrackingNumber($config,$order)
    {
        $this->result['number'] = $order['number'];
        if($this->formatHeader($config)){
            $params = ['reference_no'=>$order['number']];
            $commitData['paramsJson'] = json_encode($params);
            $commitData['appToken'] = $this->_config['appToken'];
            $commitData['appKey']   = $this->_config['appKey'];
            $commitData['serviceMethod'] = 'gettrackingnumber';
            $result = Curl::curlPost($this->_config['url'], http_build_query($commitData));
            //日志记录
            $arr_log = [
                'url'=>$this->_config['url'],
                'header'=>'',
                'request'=>$commitData,
                'response'=>$result
            ];
            Cache::store('LogisticsLog')->setLogisticsLog($order['number'],$arr_log);
            $result = Xml::xmlToArray($result);
            $response = json_decode($result[0], true);
            // 处理响应内容
            if (is_array($response)) {
                if (isset($response['success']) && $response['success']==1) {
                    $this->result['data']['trackingNumber'] = $response['data']['shipping_method_no'];
                    $this->result['success'] = true;
                } else {
                    $this->result['error'] = [
                        'error_code' => 1,
                        'error_msg'  => $response['cnmessage']
                    ];
                }
            } else {
                $this->result['error'] = [
                    'error_msg'  => '网络错误,连接不上服务器',
                    'error_code' => 1
                ];
            }
        }

        return $this->result;
    }
    
    /**
     * Suitable 提交订单到俄顺国际
     * @param unknown $data : 订单信息数组
     * @return $result ： 结果信息数组
     */
    public function createOrder($config,$data,$confirm=true)
    {
        if (!isset($data['number'])) {
            $data = $data[0];
        }
        $this->result['number'] = $data['number'];
        if($this->formatHeader($config)){
            $commitData['paramsJson'] = $this->buildData($data);
            $commitData['appToken'] = $this->_config['appToken'];
            $commitData['appKey'] = $this->_config['appKey'];
            $commitData['serviceMethod'] = 'createorder';

            $result = Curl::curlPost($this->_config['url'], http_build_query($commitData));

            //日志记录
            $arr_log = [
                'url'=>$this->_config['url'],
                'header'=>'',
                'request'=>$commitData,
                'response'=>$result
            ];
            Cache::store('LogisticsLog')->setLogisticsLog($data['number'],$arr_log);

            $result = Xml::xmlToArray($result);
            $response = json_decode($result[0], true);
            if (is_array($response)) {
                if(isset($response['success']) && $response['success']==1){
                    $result = $response['data'];
                    $this->result['data']['number']             = $result['refrence_no'];                            // 客户订单号
                    $this->result['data']['package_code']       = $result['order_id'];                              // One World包裹处理号
                    $this->result['data']['trackingNumber']     = $result['shipping_method_no'];                            // 跟踪号
                    $this->result['data']['has_trackingNumber'] = $config['has_trackingNumber'] ;                           // 是否有跟踪号
                    $this->result['data']['confirm']            = true;                                                 // 是否交运
                    $this->result['data']['label']              = true;                              // 是否有pdf
                    $this->result['data']['label_url']          = '';                              // 是否有pdf
                    $this->result['data']['is_weight']          = false;                              // 是否能查询实际重量
                    $this->result['data']['is_fee']             = false;                              // 是否能查询实际费用
                    $this->result['data']['send']               = false;                              // 是否能查询物流订单状态
                    $this->result['success']                    = true;

                }else{
                    $this->result['error'] = [
                        'error_msg'  => $response['cnmessage'],
                        'error_code' => 1  // 1为错误， 2为包裹已经提交
                    ];
                }
            }else {
                $this->result['error'] = [
                    'error_msg'  => '网络错误,连接不上服务器',
                    'error_code' => 1
                ];
            }
        }

        return $this->result;
    }

    /**
     * 获取面单
     * @param $config
     * @param $order
     * @return array
     */
    public function getLabel($config, $order)
    {
        $this->result['number'] = $order['number'];
        if($this->formatHeader($config)){
            $params = [
                'configInfo'=>[
                    'lable_file_type'=>'2',
                    'lable_paper_type'=>'1',
                    'lable_content_type'=>'4',
                    'additional_info'=>[
                        'lable_print_invoiceinfo'=>'N',
                        'lable_print_buyerid'=>'N',
                        'lable_print_datetime'=>'Y',
                        'customsdeclaration_print_actualweight'=>'N',
                    ]
                ],
                'listorder'=>[['reference_no'=>$order['number']]]
            ];
            $commitData['paramsJson'] = json_encode($params);
            $commitData['appToken'] = $this->_config['appToken'];
            $commitData['appKey']   = $this->_config['appKey'];
            $commitData['serviceMethod'] = 'getnewlabel';
            $result = Curl::curlPost($this->_config['url'], http_build_query($commitData));
            $result = Xml::xmlToArray($result);
            $response = json_decode($result[0], true);
            // 处理响应内容
            if (is_array($response)) {
                if (isset($response['success']) && $response['success']==1) {
                    $responseString  = Curl::curlGet($response['data'][0]['lable_file']);
//                    if (!is_dir($order['path'])){
//                        mkdir($order['path'],0777);  // 创建文件夹test,并给777的权限（所有权限）
//                    }
//                    $filename = $order['path'] . '/'.$order['process_code']. '.pdf';
//                    file_put_contents($filename, $responseString);

                    $service = new PackageLabelFileService();
                    $label_url = $service->uploadLabelFile($order['number'],base64_encode($responseString),'pdf');
                    //$this->result['data']['body'] = base64_encode($responseString);
                    $this->result['data']['src'] = $label_url;
                    $this->result['data']['type'] = 'pdf';
                    $this->result['success']                    = true;
                } else {
                    $this->result['error'] = [
                        'error_code' => 1,
                        'error_msg'  => $response['cnmessage']
                    ];
                }
            } else {
                $this->result['error'] = [
                    'error_msg'  => '网络错误,连接不上服务器',
                    'error_code' => 1
                ];
            }
        }

        return $this->result;
    }
    
    public function getExpress($config){
        if($this->formatHeader($config)){
            $data = [];
            $paramsJson = [];
            $commitData['paramsJson']       = json_encode($paramsJson);
            $commitData['appToken']         = $this->_config['appToken'];
            $commitData['appKey']           = $this->_config['appKey'];
            $commitData['serviceMethod']    = 'getshippingmethod';
            $result = Curl::curlPost($this->_config['url'], http_build_query($commitData));
            $result = Xml::xmlToArray($result);
            $result = json_decode($result[0], TRUE);
            if($result['success']!=1){
                $this->result['error'] = [
                    'error_msg'=>isset($result['cnmessage'])?$result['cnmessage']:'未知错误',
                    'error_code'=>1
                ];
            }else{
                foreach($result['data'] as $k=>$item){
                    $data[$k] = [
                        'name'=>$item['cnname'],
                        'code'=>$item['code']
                    ];
                }
                $this->result['success'] = true;
                $this->result['data'] = $data;
            }

        }
        return $this->result;
    }

    /**
     * 取消删除包裹
     * @param type $config
     * @param type $order
     * @return type
     */
    public function cancel($config,$order)
    {
        $this->result['number'] = $order['number'];
        $this->result['error'] = [
            'error_msg'=>'物流订单不支持取消操作',
            'error_code'=>1
        ];
        return $this->result;
    }
    
    private function buildData($data){
        $result = [];
        $result['reference_no']  = isset($data['customer_number']) && $data['customer_number'] ? $data['customer_number'] :$data['number'];
        $result['shipping_method'] = $data['shipping_method_code'];
        //$result['order_weight'] = 0;
        //$result['order_pieces'] = 1;
        //$result['mail_cargo_type'] = 2;
        $result['return_sign'] = $data['is_need_return']==1?'Y':'N';
        //$result['buyer_id'] = 65143;
        //$result['order_info'] = 'test order';
        //         $data['shipper'] = 'test';
        //         $data['consignee'] = 'test';
        //         $data['invoice'] = 'test';
        ///发送人信息
        $result['shipper']  = [
                    'shipper_name'        => $data['sender']['sender_name'],
                    //'shipper_company'     => $data['sender']['sender_name'],
                    'shipper_countrycode' => $data['sender']['sender_country'],
                    'shipper_province' => $data['sender']['sender_state'],
                    'shipper_city' => $data['sender']['sender_city'],
                    'shipper_street'    => $data['sender']['sender_street'],
                    'shipper_postcode'  => $data['sender']['sender_zipcode'],
                    //'shipper_areacode'  => $data['sender']['sender_name'],
                    'shipper_telephone' => $data['sender']['sender_phone'],
                    'shipper_mobile' => $data['sender']['sender_mobile'],
                    //'shipper_email'     => $data['sender']['sender_name'],
            ];
        //收货人信息
        $result['consignee'] = [
                    'consignee_name'        => $data['name'],
                    'consignee_countrycode' => $data['country_code'],
                    'consignee_street'      => $data['street'].' '.$data['street2'],
                    'consignee_mobile'      => $data['phone'],
                    'consignee_province'      => $data['province'],
                    'consignee_city'      => $data['city'],
                    'consignee_telephone'      => $data['tel'],
                    'consignee_postcode'      => $data['zip'],

            ];
        //$result['extra_servicecode']  = '';
        //$result['extra_servicevalue'] = '';
        //产品信息
        $invoices = [];
        foreach($data['declared_info'] as $k=>$declared){
            $declared = isset($data['declared_info'][$k]) ? $data['declared_info'][$k] : [];
            $invoices[] = [
                'sku'                => $declared['sku'],
                'invoice_enname'     => $declared['declared_name_en'],
                'invoice_cnname'     => $declared['declared_name_cn'],
                'invoice_quantity'   => $declared['qty'],
                'invoice_unitcharge' => number_format($declared['declared_value'],2),
                'hs_code'            => $declared['hs_code'],
            ];
        }
        $result['invoice'] = $invoices;
        return json_encode($result);
  
    }
    
}