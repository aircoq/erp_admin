<?php

namespace service\shipping\operation;

use app\carrier\service\PackageLabelFileService;
use app\common\cache\Cache;
use app\common\model\jumia\JumiaOrder;
use app\common\model\jumia\JumiaOrderDetail;
use app\common\model\Order;
use app\common\service\ChannelAccountConst;
use jumia\JumiaOrderApi;


/**
 * JumiaOnLine物流
 * @package app\carrier\controller
 */
class JumiaOnLine
{
    // 配置信息
    private $jumiaApi = '';
    private $orderId = '';
    private $order_id = '';
    private $orderItemIds = '';

    private $result = [
        'data' => [],
        'error' => [],
        'success' => false
    ];

    /**
     * 检查API是否正常
     * @param array $config
     * @return array | void
     */
    private function checkApi(array $pack)
    {
        $order = (new Order())->field('channel_order_number,channel_id,channel_account_id')->where(['id' => $pack['order_id']])->find();

//        $order = [
//            'channel_order_number' => '358799696',
//            'channel_id' => '13',
//            'channel_account_id' => '1',
//
//        ];

        if (!$this->jumiaApi) {
            if ($order['channel_id'] != ChannelAccountConst::Channel_Jumia) {
                $this->result['error'] = [
                    'error_msg' => '该物流仅供Jumia订单使用',
                    'error_code' => 1
                ];
                return false;
            }

            $shop = Cache::store('JumiaAccount')->getTableRecord($order['channel_account_id']);

            if (!$shop || !$shop['client_id'] || !$shop['client_secret']){
                $this->result['error'] = [
                    'error_msg' => 'Jumia账号信息不全',
                    'error_code' => 1
                ];
                return false;
            }
            $order_ids = (new JumiaOrder())->where(['order_number'=>$order['channel_order_number']])->value('order_id');
            if(!$order_ids){
                $this->result['error'] = [
                    'error_msg' => 'Jumia订单号不全',
                    'error_code' => 1
                ];
                return false;
            }
            $this->orderId = $order['channel_order_number'];
            $this->order_id = $order_ids;
            $ids = (new JumiaOrderDetail())->where(['order_id'=>$order_ids])->column('order_item_id');
            $this->orderItemIds = $ids;

            $this->jumiaApi = new JumiaOrderApi($shop);
        }
        return true;
    }

    /**
     * 上传订单到物流商
     * @param $config $order
     * @param $pack $product
     * @return unknown[]|string[]
     */
    public function createOrder($config, $pack)
    {
        if (!isset($pack['number'])) {
            $pack = $pack[0];
        }
        $this->result['number'] = $pack['number'];
        if ($this->checkApi($pack)) {
            $referenceID = isset($pack['customer_number']) && $pack['customer_number'] ? $pack['customer_number'] : $pack['number'];
            $order_ids = $this->orderId; //jumia平台订单号
            $orderItemIds = $this->orderItemIds; //jumia平台订单号 的商品 编号

            $tracking_provider =  $pack['shipping_method_code'];

            $result = $this->jumiaApi->setStatusToPackedByMarketplace($orderItemIds, $tracking_provider); //标记为打包

            if(!$result){
                $result = $this->jumiaApi->getError();
            }

            //日志记录
            $arr_log = [
                'pack' => $pack,
                'order_number' => $order_ids,
                'order_id' => $this->order_id,
                'orderItemIds' => $orderItemIds,
                'response' => is_array($result) ? json_encode($result) : $result
            ];


            if (!isset($result['PackageId'])) {
                //查看是否为 	ready_to_ship
                $order_now = $this->jumiaApi->getOrderById($this->order_id);
                if($order_now && ($order_now['Orders']['Statuses']['Status'] == 'delivered' || $order_now['Orders']['Statuses']['Status'] == 'ready_to_ship')){
                    $result = isset($order_now['OrderItems']['OrderItem'][0]) ? $order_now['OrderItems']['OrderItem'][0] : $order_now['OrderItems']['OrderItem'];
                }else{
                    Cache::store('LogisticsLog')->setLogisticsLog($pack['number'], $arr_log);

                    $this->result['error'] = [
                        'error_msg' => $this->jumiaApi->getError(),
                        'error_code' => 1
                    ];
                    return $this->result;
                }
            }

            $this->result['data']['number'] = $order_ids;      // 客户订单号
            $this->result['data']['package_code'] = $result['PurchaseOrderNumber'] ?? '';      // One World包裹处理号
            $this->result['data']['trackingNumber'] = $result['PackageId'];  // 跟踪号
            $this->result['data']['confirm'] = true;                              // 是否交运
            $this->result['data']['label'] = true;                              // 是否有pdf
            $this->result['data']['label_url'] = '';       // 是否有pdf
            $this->result['data']['is_weight'] = false;                              // 是否能查询实际重量
            $this->result['data']['is_fee'] = false;                              // 是否能查询实际费用
            $this->result['data']['send'] = false;                              // 是否能查询物流订单状态
            $this->result['success'] = true;

        }
        return $this->result;
    }



    /**
     * 获取运输方式详细信息
     */
    public function getExpress($config)
    {
        $response = [
            ['ServiceCode'=>'NG-JG-Seko-HongKong-Seko-Station','Name'=>'NG-JG-Seko-HongKong-Seko-Station'],
            ['ServiceCode'=>'NG-JG-Seko-Shenzhen-Seko-Station','Name'=>'NG-JG-Seko-Shenzhen-Seko-Station'],
        ];
        foreach ($response as $k => $v) {
            $datas[$k]['code'] = $v['Name'];
            $datas[$k]['name'] = $v['ServiceCode'];
        }

        $this->result['success'] = true;
        $this->result['data'] = $datas;


        return $this->result;
    }


    /**
     * 获取跟踪号
     */
    public function getTrackingNumber($config, $order)
    {
        $this->result['number'] = $order['number'];
        $this->result['error'] = [
            'error_msg' => '不支持获取跟踪号',
            'error_code' => 1
        ];
        $this->result['success'] = false;
        return $this->result;
    }

    /**
     * 取消删除包裹
     * @param array $config
     * @param array $order
     * @return type
     */
    public function cancel(array $config, array $order)
    {
        $this->result['number'] = $order['number'];
        $this->result['error'] = [
            'error_msg' => '不支持取消',
            'error_code' => 1
        ];
        $this->result['success'] = false;
        return $this->result;
    }

    /**
     * 获取标签
     * @param type $config
     * @param type $order
     * @return type
     */
    public function getLabel($config, $order)
    {
        $this->result['number'] = $order['number'];
        $this->result['error'] = [
            'error_msg' => '不支持获取面单',
            'error_code' => 1
        ];
        $this->result['success'] = false;
        return $this->result;
    }

    /**
     * 获取包裹详细
     * @param $config
     * @param $order
     * @return array
     */
    public function getPackageDetails($config, $order)
    {
        if ($this->checkApi($config)) {

            $trackNumber = $order['process_code'];//追踪号
            $response = $this->jumiaApi->getTrackInfo($trackNumber);
            $msg = $this->jumiaApi->getErrorMsg();
            if ($msg != '') {
                $this->result['error'] = [
                    'error_msg' => $msg,
                    'error_code' => 1
                ];
                return false;
            }

            $this->result['data'] = $response;
            $this->result['success'] = true;

        }

        return $this->result;
    }

    /**
     * 获取包裹实际重量和运费
     * @param $config
     * @param $order
     * @return array
     */
    public function getWeightFee($config, $order)
    {
        $this->result['number'] = $order['number'];
        $result = $this->getPackageDetails($config, $order);
        if (!$result['success']) {
            $this->result = $result;
        } else {
            $this->result['data'] = [
                'real_weight' => $result['data']['weight'],
                'real_fee' => $result['data']['reviseFreight'],
                'currency' => ''
            ];
            $this->result['success'] = true;
        }
        return $this->result;
    }

    /**
     * 获取物流包裹状态
     * @param $config
     * @param $order
     */
    public function getPackageStatus($config, $order)
    {
        $result = $this->getPackageDetails($config, $order);
        if ($result['success']) {
            $this->result['data'] = [
                'is_send' => $result['data']['status'] == 9 ? true : false
            ];
        }
    }


}