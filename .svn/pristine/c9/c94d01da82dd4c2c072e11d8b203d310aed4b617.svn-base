<?php

namespace erp;

/**
 * Created by PhpStorm.
 * User: wuchuguang
 * Date: 17-3-15
 * Time: 下午3:43
 */
/**
 * Class ErpModel
 * @package app\common
 */
use app\common\exception\RelateDeleteException;
use app\common\traits\ModelFilter;
use think\Db;

/**
 * @method $this cache($key = true, $expire = null, $tag = null)
 * @method $this order($field, $order = null)
 * @method $this group($field)
 * @method $this page($page, $listRows = null)
 * @method $this limit($offset, $length = null)
 * @method $this where($field, $op = null, $condition = null)
 * @method $this whereOr($field, $op = null, $condition = null)
 * @method $this field($field)
 */

class ErpModel extends \think\Model
{
//    private static $debug = true;
    private static $debug = false;
    private static $open_debug = false;
    protected $query = ErpQuery::class;
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    protected static $beforeFind = [];

    protected $virtualFields = [];

    protected static $associatedDeleteCallbacks = [

    ];

    protected static function init()
    {
        if(self::$debug && !self::$open_debug){
            self::$open_debug = true;
            Db::listen(function($sql, $time, $explain){
                // 记录SQL
                echo $sql. ' ['.$time.'s]'."\n<br/>";
//            var_dump($explain);
            });
        }
        parent::init();
        Db::event('before_find',function($options, $query){
            $table = $options['table'];
            if(is_array($table)){
                $table = array_shift($table);
            }
            if(isset(static::$beforeFind[$table]) &&
               isset(static::$beforeFind[$table]['before_find'])){
                $callback = static::$beforeFind[$table]['before_find'];
                return call_user_func_array($callback, [$options, $query]);
            }
        });

        Db::event('before_select',function($options, $query){
            $table = $options['table'];
            if(is_array($table)){
                $table = array_shift($table);
            }
            if(isset(static::$beforeFind[$table]) &&
                isset(static::$beforeFind[$table]['before_select'])){
                $callback = static::$beforeFind[$table]['before_select'];
                return call_user_func_array($callback, [$options, $query]);
            }
        });

        static::beforeDelete(function(ErpModel $model){
            $pk = $model->getPk();
            $pkValue = $model->$pk;
//            try{
                foreach (static::$associatedDeleteCallbacks as $class=>$method){
                    if(class_exists($class)){
                        forward_static_call([$class, $method], $pkValue);
                        continue;
                    }
                    if(is_callable($method)){
                        $method($pkValue);
                        continue;
                    }
                    if(class_exists($method)){
                        $method::relateDelete($pkValue);
                    }
                }
                return true;
//            }catch (RelateDeleteException $exception){
//                return false;
//            }
        });
    }

    public static function beforeFind($callback)
    {
        $table = $table = (new static())->getTable();
        static::$beforeFind[$table]['before_find'] = $callback;
    }

    public static function beforeSelect($callback)
    {
        $table = $table = (new static())->getTable();
        static::$beforeFind[$table]['before_select'] = $callback;
    }

    /**
     * @doc hasWhere的加强版
     * @param $hasWheres array hasWhere复数（数组）
     * @return mixed|null|static
     */
    public static function hasWhereHeighten($hasWheres)
    {
        $model = null;
        if(!empty($hasWheres)){
            foreach ($hasWheres as $key => $hasWhere){
                if($model){
                    $model = call_user_func([$model,"hasWhere"], $key, $hasWhere);
                }else{
                    $model = forward_static_call([static::class, "hasWhere"], $key, $hasWhere);
                }
            }
        }else{
            $model = new static();
        }
        return $model;
    }


    /**
     * 保存多个数据到当前数据对象(无事务)
     * @access public
     * @param array   $dataSet 数据
     * @param boolean $replace 是否自动识别更新和写入
     * @return array|false
     * @throws \Exception
     */
    public function saveAllWithOutTrans($dataSet, $replace = true)
    {
        if ($this->validate) {
            // 数据批量验证
            $validate = $this->validate;
            foreach ($dataSet as $data) {
                if (!$this->validateData($data, $validate)) {
                    return false;
                }
            }
        }

        $result = [];
        $pk = $this->getPk();
        if (is_string($pk) && $replace) {
            $auto = true;
        }
        foreach ($dataSet as $key => $data) {
            if (!empty($auto) && isset($data[$pk])) {
                $result[$key] = self::update($data, [], $this->field);
            } else {
                $result[$key] = self::create($data, $this->field);
            }
        }
        return $result;
    }

}