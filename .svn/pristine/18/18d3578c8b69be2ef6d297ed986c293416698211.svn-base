<?php
/**
 * Created by PhpStorm.
 * User: libaimin
 * Date: 2018/6/5
 * Time: 18:16
 */

namespace jumia;

use org\Xml;

class JumiaBaseApi
{
    protected $url = "https://sellercenter-api.jumia.com.ng";
    protected $client_id = '';

    protected $client_secret = '';

    protected $code = '';

    protected $error = '';

    protected $channel_type = '';

    public function __construct($params = [])
    {
        $this->client_id = $params['client_id'] ?? '';
        $this->client_secret = $params['client_secret'] ?? '';
        $this->code = $params['code'] ?? '';
        $this->channel_type = $params['channel_type'] ?? $params['channel_type'] ?? '';
        $this->site = $params['site'] ?? $params['site'] ?? '';
    }
    /**
     * 获得jumia请求前置配置数据
     * @param string $site
     * @return array|mixed
     */
    public static function getJumiaConfig($site=''){
        $return = [];
        $configArr = [
            //尼日利亚
            'ng'=>[
                'service_url'=>'https://sellercenter-api.jumia.com.ng',
            ],
            //肯尼亚
            'ke'=>[
                'service_url'=>'https://sellercenter-api.jumia.co.ke',
            ],
            // 摩洛哥
            'ma'=>[
                'service_url'=>'https://sellercenter-api.jumia.com.ma',
            ],
            // 科特迪瓦
            'ci'=>[
                'service_url'=>'https://sellercenter-api.jumia.ci',
            ],
            // 埃及
            'eg'=>[
                'service_url'=>'https://sellercenter-api.jumia.com.eg',
            ],

        ];

        //如果站点不为空则取站点数据，否则返回所有站点数据
        if(!empty($site)){
            $site = strtolower($site);//转小写
            $return = isset($configArr[$site]) ? $configArr[$site] : [] ;
        }
        return $return;
    }

    public function getError()
    {
        return $this->error;
    }

    /**
     * 得到私密的Parameters资源
     * @param string $parameters 请求方式
     * @param string $format 返回数据类型
     * @return array Parameters资源
     */
    public function getParameters($parameters, $format = 'JSON')
    {

        $parameters['UserID'] = $this->client_id;
        $parameters['Version'] = '1.0';
        $parameters['Format'] = $format;
        $parameters['Timestamp'] = $this->getTimestamp();

        ksort($parameters);
        $encoded = array();
        foreach ($parameters as $name => $value) {
            $encoded[] = rawurlencode($name) . '=' . rawurlencode($value);
        }
        $concatenated = implode('&', $encoded);
        $api_key = $this->client_secret;
        $parameters['Signature'] = rawurlencode(hash_hmac('sha256', $concatenated, $api_key, false));

        return $parameters;

    }


    /**
     * 获取当前时间戳
     * @return int timestamp
     */
    public function getTimestamp($time = false)
    {
//        date_default_timezone_set("UTC");
        if (!$time) {
            $time = time();
        }
        $time -= 28800;
        $now = date('Y-m-d\TH:i:s', $time) . '+00:00';
        return $now;
    }

    /**
     * 发起请求
     * @param $url
     * @param array $headers
     * @param array $bodyData
     * @param $method 访问方法'GET'， 'POST'
     * @param bool $httpCode 是否返回状态码
     * @return mixed
     */
    public function httpCurl($url, $headers = [], $method = 'GET', $bodyData = [], $httpCode = false)
    {
        $curl = curl_init();
        $header_array = [];
        $method = strtoupper($method);
        if ($method == 'POST') {
            $headers['Content-Type'] = 'application/xml';
        }
        foreach ($headers as $k => $v) {
            $header_array[] = $k . ': ' . $v;
        }
        curl_setopt_array($curl, array(
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 300,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_HTTPHEADER => $header_array,
        ));

        switch ($method) {
            case 'GET':
                if (!empty($bodyData)) {
                    if (is_array($bodyData)) {
                        $url .= (stristr($url, '?') === false ? '?' : '&') . http_build_query($bodyData);
                    } else {
                        curl_setopt($curl, CURLOPT_POSTFIELDS, $bodyData);
                    }
                }
                break;
            case 'POST':
                curl_setopt($curl, CURLOPT_POST, true);
                if (!empty ($bodyData)) {
                    curl_setopt($curl, CURLOPT_POSTFIELDS, $bodyData);
                }
                break;

        }
        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $method);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false); //不验证证书
        curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false); //不验证证书
        $response = curl_exec($curl);
        $err = curl_error($curl);
        $code = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        curl_close($curl);

        if ($httpCode) {
            return $code;
        }
        if ($err) {
            return "cURL Error #:" . $err;
        } else {
            return $response;
        }
        return true;

    }

    public function arrayToXml($arr, $root = 'root')
    {
        $xml = '<?xml version="1.0" encoding="UTF-8" ?>' . "<$root>";
        foreach ($arr as $key => $val) {
            if (is_array($val)) {
                $xml .= "<" . $key . ">" . $this->arrayToXml($val) . "</" . $key . ">";
            } else {
                $xml .= "<" . $key . ">" . $val . "</" . $key . ">";
            }
        }
        $xml .= "</$root>";
        return $xml;
    }


}