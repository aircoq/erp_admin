<?php
namespace Api\Doc;

use app\purchase\controller\PurchaseProposal;
use think\exception\ErrorException;

class Doc
{
    protected  $config = [
        'title'=>'APi接口文档',
        'version'=>'1.0.0',
        'copyright'=>'Powered By Zhangweiwei',
        'controller' => [],
        'filter_method'=>['_empty'],
        'return_format' => [
            'status' => "200/300/301/302",
            'message' => "提示信息",
        ]
    ];

    /**
     * 架构方法 设置参数
     * @access public
     * @param  array $config 配置参数
     */
    public function __construct($config = [])
    {
        $this->config = array_merge($this->config, $config);
    }

    /**
     * 使用 $this->name 获取配置
     * @access public
     * @param  string $name 配置名称
     * @return mixed    配置值
     */
    public function __get($name)
    {
        return $this->config[$name];
    }

    /**
     * 设置验证码配置
     * @access public
     * @param  string $name  配置名称
     * @param  string $value 配置值
     * @return void
     */
    public function __set($name, $value)
    {
        if (isset($this->config[$name])) {
            $this->config[$name] = $value;
        }
    }

    private function buildInAction($action, $class_doc)
    {
        $class = param($class_doc, 'class');
        $moduleurl = param($class_doc, 'url');
        $doc = new DocParser();
        $doc_str = $action->getDocComment();
        $action_doc = $doc->parse($doc_str);
        preg_match("/app\\\\([\w]+)\\\\controller\\\\([\w]+)/i", $class, $match);
        $module = "{$match[1]}/{$match[2]}";
        $url =$moduleurl?:strtolower($module);
        if(!param($action_doc, 'author')){
            $action_doc['author'] = param($class_doc, 'author');
        }
        $action_doc['method_name'] = $action->name;
        switch ($action->name){
            case 'index':
                $action_doc['url'] = param($action_doc, 'url', $url);
                $action_doc['description'] = param($action_doc, 'description', "");
                $action_doc['url_params'] = [];
                if(preg_match_all("/:([\w\d_]+)/i", $action_doc['url'], $match)){
                    $action_doc['url_params'] = $match[0];
                }
                $action_doc['title'] = param($action_doc, 'title', param($class_doc, 'title')."列表");
                $action_doc['name'] = $class."::".$action->name;
                $action_doc['mca'] = $module."/".$action->name;
                $action_doc['method'] = param($action_doc, 'method', 'get');
                return $action_doc;
            case 'save'://添加
                $action_doc['url'] = param($action_doc, 'url', $url);
                $action_doc['description'] = param($action_doc, 'description', "");
                $action_doc['url_params'] = [];
                if(preg_match_all("/:([\w\d_]+)/i", $action_doc['url'], $match)){
                    $action_doc['url_params'] = $match[0];
                }
                $action_doc['title'] = param($action_doc, 'title', param($class_doc, 'title')."添加");
                $action_doc['name'] = $class."::".$action->name;
                $action_doc['mca'] = $module."/".$action->name;
                $action_doc['method'] = param($action_doc, 'method', 'post');
                return $action_doc;
                break;
            case 'edit':
                $action_doc['title'] = param($action_doc, 'title', param($class_doc, 'title')."编辑");
                $action_doc['url'] = param($action_doc, 'url', $url."/:id(\d+)/edit");
                $action_doc['name'] = $class."::".$action->name;
                $action_doc['mca'] = $module."/".$action->name;
                $action_doc['method'] = param($action_doc, 'method', 'GET');
                $action_doc['description'] = param($action_doc, 'description', "");
                if(preg_match_all("/:([\w\d_]+)/i", $action_doc['url'], $match)){
                    $action_doc['url_params'] = $match[0];
                }
                return $action_doc;
                break;
            case 'read':
                $action_doc['title'] = param($action_doc, 'title', param($class_doc, 'title')."获取");
                $action_doc['url'] = param($action_doc, 'url', $url."/:id(\d+)");
                $action_doc['name'] = $class."::".$action->name;
                $action_doc['mca'] = $module."/".$action->name;
                $action_doc['method'] = param($action_doc, 'method', 'get');
                $action_doc['description'] = param($action_doc, 'description', "");
                if(preg_match_all("/:([\w\d_]+)/i", $action_doc['url'], $match)){
                    $action_doc['url_params'] = $match[0];
                }

                return $action_doc;
            case 'delete':
                $action_doc['title'] = param($action_doc, 'title', param($class_doc, 'title')."删除");
                $action_doc['url'] = param($action_doc, 'url', $url."/:id(\d+)");
                $action_doc['name'] = $class."::".$action->name;
                $action_doc['mca'] = $module."/".$action->name;
                $action_doc['method'] = param($action_doc, 'method', 'DELETE');
                $action_doc['description'] = param($action_doc, 'description', "");
                if(preg_match_all("/:([\w\d_]+)/i", $action_doc['url'], $match)){
                    $action_doc['url_params'] = $match[0];
                }
                return $action_doc;

            case "update":
                $action_doc['title'] = param($action_doc, 'title', param($class_doc, 'title')."更新");
                $action_doc['url'] = param($action_doc, 'url', $url."/:id(\d+)");
                $action_doc['name'] = $class."::".$action->name;
                $action_doc['mca'] = $module."/".$action->name;
                $action_doc['method'] = param($action_doc, 'method', 'PUT');
                $action_doc['description'] = param($action_doc, 'description', "");
                if(preg_match_all("/:([\w\d_]+)/i", $action_doc['url'], $match)){
                    $action_doc['url_params'] = $match[0];
                }
                return $action_doc;
            default:
                return false;
        }
    } 

    /**
     * 检查配置
     * @access public
     * @param  string $name 配置名称
     * @return bool
     */
    public function __isset($name)
    {
        return isset($this->config[$name]);
    }

    public function getList2()
    {
        $controller = $this->config['controller'];
        $list = [];
        $error = [];
        foreach ($controller as $class)
        {
            if(class_exists($class))
            {
                $docClass = new ClassDoc($class);
                $list[] = $docClass->getController();
                $error = array_merge($error, $docClass->getErrors());
            }
        }
        return ['list'=>$list,'error'=>$error];
    }

    /**
     * 获取接口列表
     * @return array
     */
    public function getList()
    {
        $controller = $this->config['controller'];
        $list = [];
        $error = [];
        foreach ($controller as $class)
        {
            if(class_exists($class))
            {
                try{
                    preg_match("/app\\\\([\w]+)\\\\controller\\\\([\w]+)/i", $class, $match);
                    $module = "{$match[1]}/{$match[2]}";
                    $moudel= [];
                    $reflection = new \ReflectionClass($class);
                    $doc_str = $reflection->getDocComment();
                    $doc = new DocParser();
                    $class_doc = $doc->parse($doc_str);
                    $moudel =  $class_doc;
                    $moudel['class'] = $class;
                    $moudel['module'] = param($class_doc, 'module',$this->config['module']);
                    $method = $reflection->getMethods(\ReflectionMethod::IS_PUBLIC);
                    $filter_method = array_merge(['__construct'], $this->config['filter_method']);
                    $moudel['actions'] = [];
                    foreach ($method as $action){
                        if(!in_array($action->name, $filter_method))
                        {
                            if(!$action_doc = $this->buildInAction($action, $moudel)){
                                $doc = new DocParser();
                                $doc_str = $action->getDocComment();
                                if($doc_str)
                                {
                                    $action_doc = $doc->parse($doc_str);
                                    $action_doc['url'] = $this->fixActionUrl($action_doc, $class_doc);
                                    $action_doc['name'] = $class."::".$action->name;
                                    $action_doc['mca'] = $module."/".$action->name;
                                    $action_doc['method_name'] = $action->name;
                                    $action_doc['method'] = param($action_doc, 'method', 'get');
                                }else{
                                    $action_doc = [];
                                    $action_doc['title'] = $action->name;
                                    $action_doc['method_name'] = $action->name;
                                    $action_doc['name'] = $class."::".$action->name;
                                    $action_doc['method'] = 'undefined';
                                }
                            }
                            if(!isset($action_doc['disabled'])){
                                if($method = param($action_doc, 'method')){
                                    if(!preg_match("/^(get|post|delete|put)$/i", trim($method))){
                                        continue;
                                    }
                                }
                                if(preg_match('/^[^\/]/',$action_doc['url'])){
                                    $action_doc['url'] = '/'.$action_doc['url'];
                                }
                                array_push($moudel['actions'], $action_doc);
                            }
                        }
                    }
                    array_push($list, $moudel);
                }catch (ErrorException $exception){
                    $error[] = [
                        'class'=>$class,
                        'error'=>$exception->getMessage()
                    ];
                }

            }
        }
        return ['list'=>$list,'error'=>$error];
    }

    private function fixActionUrl($action, $class)
    {
        $actionUrl =  param($action, 'url');
        if(!$classUrl = param($class, 'url')){
            return $actionUrl;
        }
        if(preg_match('/^\//', $actionUrl)){
            return $actionUrl;
        }
        $pack = '';
        if(!preg_match('/\/$/',$classUrl)){
            $pack = '/';
        }
        return $classUrl.$pack.$actionUrl;
    }

    /**
     * 获取类中指导方法注释详情
     * @param $class
     * @param $action
     * @return array
     */
    public function getInfo($class, $action)
    {
        $action_doc = [];
        if(!$class){
            return $action_doc;
        }
        preg_match("/app\\\\([\w_]+)\\\\controller\\\\([\w_]+)/i", $class, $match);
        $docClass = "app\\{$match[1]}\\doc\\{$match[2]}";
        if(class_exists($docClass)){
            $docClassDoc = $this->getClass($docClass);
            $docActionDoc = $this->getClassAction($docClass);
        }
        preg_replace("/app\\\\([\w_]+)\\\\controller\\\\([\w_]+)/i", $class, $match);
        if(class_exists())
        if($class && class_exists($class)){
            $reflection = new \ReflectionClass($class);
            if($reflection->hasMethod($action)) {
                $method = $reflection->getMethod($action);
                preg_match("/app\\\\([\w_]+)\\\\controller\\\\([\w_]+)/i", $class, $match);
                $module = "{$match[1]}/{$match[2]}";
                $moudel= [];
                $doc_str = $reflection->getDocComment();
                $doc = new DocParser();
                $class_doc = $doc->parse($doc_str);
                $moudel =  $class_doc;
                $moudel['class'] = $class;
                if(!$action_doc = $this->buildInAction($method, $moudel)){
                    $doc = new DocParser();
                    $doc_str = $method->getDocComment();
                    if($doc_str)
                    {
                        $action_doc = $doc->parse($doc_str);
                        $action_doc['url'] = $this->fixActionUrl($action_doc, $moudel);
                        $action_doc['name'] = $class."::".$method->name;
                        $action_doc['mca'] = $module."/".$method->name;
                        $action_doc['method'] = param($action_doc, 'method', 'get');
                        $action_doc['url_params'] = [];
                        if(preg_match_all("/:([\w\d_]+)/i", $action_doc['url'], $match)){
                            $action_doc['url_params'] = $match[0];
                        }
                        if(!param($action_doc, 'author')){
                            $action_doc['author'] = $this->author($reflection->getDocComment());
                        }
                    }else{
                        $action_doc = [];
                        $action_doc['title'] = $method->name;
                        $action_doc['name'] = $class."::".$method->name;
                        $action_doc['method'] = 'undefined';
                        $action_doc['description'] = 'undefined';
                        $action_doc['url_params'] = [];
                    }
                }
            }
        }
        if(isset($action_doc['apiRelate'])){
            $ret = [];
            foreach ($action_doc['apiRelate'] as $docApiRelate) {
                $apiRelates = explode("&",trim($docApiRelate));
                foreach ($apiRelates as $apiRelate){
                    $apiRelate1 = explode("::", $apiRelate);
                    switch (count($apiRelate1)){
                        case 1:
                            $apiRelateClass = $class;
                            $apiRelateAction = $apiRelate1[0];
                            break;
                        case 2:
                            $apiRelateClass = $apiRelate1[0];
                            $apiRelateAction = $apiRelate1[1];
                            break;
                    }
                    if($relateInfo = $this->getInfo($apiRelateClass, $apiRelateAction)){
                        $ret[$apiRelate] = strtolower($relateInfo['method'])."|".preg_replace("/^\\//","",$relateInfo['url'])."({$relateInfo['title']})";
                    };
                }
            }
            $action_doc['apiRelate'] = $ret;
        }
        return $action_doc;
    }


    public function pdoc($class, $action)
    {

    }

    public function author($string)
    {
        $doc = new DocParser();
        $action_doc = $doc->parse($string);
        return param($action_doc, 'author');
    }

    /**
     * 格式化数组为json字符串-用于格式显示
     * @param array $doc
     * @return string
     */
    public function formatReturn($doc = [])
    {
        $json = '{<br/>';
        $returns = isset($doc['apiReturn']) ? $doc['apiReturn'] : [];
        foreach ($returns as $val)
        {
            list($name, $value) =  explode(":", trim($val));
            if(strpos($value, '@') != false){
                $json .= $this->string2jsonArray($doc, $val, '&nbsp;&nbsp;&nbsp;&nbsp;');
            }else{
                $json .= '&nbsp;&nbsp;&nbsp;&nbsp;' . $this->string2json(trim($name), $value);
            }
        }
        $json .= '&nbsp;&nbsp;}<br/>';
        $json .= '}';
        return $json;
    }

    /**
     * 格式化json字符串-用于展示
     * @param $name
     * @param $val
     * @return string
     */
    private function string2json($name, $val){
        if(strpos($val,'#') != false){
            return '"'.$name.'": ["'.str_replace('#','',$val).'"],<br/>';
        }else {
            return '"'.$name.'":"'.$val.'",<br/>';
        }
    }

    /**
     * 递归转换数组为json字符格式-用于展示
     * @param $doc
     * @param $val
     * @param $space
     * @return string
     */
    private function string2jsonArray($doc, $val, $space){
        list($name, $value) =  explode(":", trim($val));
        $json = "";
        if(strpos($value, "@!") != false){
            $json .= $space.'"'.$name.'":{//'.str_replace('@!','',$value).'<br/>';
        }else{
            $json .= $space.'"'.$name.'":[{//'.str_replace('@','',$value).'<br/>';
        }
        $return = isset($doc[$name]) ? $doc[$name] : [];
        if(preg_match_all('/(\w+):(.*?)[\s\n]/s', $return." ", $meatchs)){
            foreach ($meatchs[0] as $key=>$v){
                if(strpos($meatchs[2][$key],'@') != false){
                    $json .= $this->string2jsonArray($doc,$v,$space.'&nbsp;&nbsp;');
                } else{
                    $json .= $space.'&nbsp;&nbsp;'. $this->string2json(trim($meatchs[1][$key]), $meatchs[2][$key]);
                }
            }
        }
        if(strpos($value, "@!") != false){
            $json .= $space."}<br/>";
        }else{
            $json .= $space."}]<br/>";
        }
        return $json;
    }
}