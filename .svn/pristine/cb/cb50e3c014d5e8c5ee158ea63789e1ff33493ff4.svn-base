<?php
/**
 * Created by PhpStorm.
 * User: laiyongfeng
 * Date: 2018-05-19
 * Time: 15:45
 */

namespace service\warehouse\operation;

use service\Gucang\GucangApi;
use think\Exception;
use app\common\model\WarehouseGoodsForecast as WarehouseGoodsForecastModel;

class Gucang
{
    private $_service = null;
    protected $result   = [
        'data'    => [],
        'error'   => [],
        'success' => false
    ];
    /**
     * 组装header信息
     * @param array $config
     * @throws Exception
     */
    private function formatHeader(array $config)
    {
        if (empty($config['username']) || empty($config['token'])) {
            throw new Exception('账号授权信息缺失');
        }
        $this->_service = new GucangApi($config['username'], $config['token']);
    }

    /**
     * 递归获取数据
     * @params string $func
     * @params int $page
     * @params int $pageSize
     * @params array $params 请求参数
     * @throws Exception
     * @return array
     */
    private function getResponseData($func, $other_params=[], $page=1, $pageSize = 100)
    {
        $response_data = [];
        $share_params = array(
            'pageSize' => $pageSize,
            'page' => $page
        );
        $params = array_merge($share_params, $other_params);
        $rs = call_user_func(array($this->_service,'get'.ucfirst($func)), $params);
        if($rs['ask']=='Success'  && $rs['data']){
            $response_data = $rs['data'];
            if($rs['nextPage'] && $rs['nextPage']!='false'){
                $page++;
                $next = $this->getResponseData($func, $other_params, $page);
                $response_data = array_merge($response_data, $next);
            }
        } else {
            $error = $rs['Error']['errMessage'] ?? '未知错误';
            throw new Exception($error);
        }
        return $response_data;
    }

    /**
     * @desc 获取品类
     */
    public function getCategory($config)
    {
        try{
            $this->formatHeader($config);
            $categories =  $this->getResponseData('Category');
            $this->result['success'] = true;
            $this->result['data'] = $categories;
            return $this->result;
        }catch(Exception $ex){
            $this->result['success'] = false;
            $this->result['erorr'] = $ex->getMessage();
        }
        return $this->result;
    }

    /**
     * @desc 组装下单数组
     * @params array
     * @return array
     */
    private function bulidProductData($data)
    {
        $request['product_sku'] = $data['sku'];
        $request['reference_no'] = $data['sku'];
        $request['product_title'] = $data['title'];
        $request['product_weight'] = $data['weight']/1000;
        $request['product_length'] = $data['length']/10;
        $request['product_width'] = $data['width']/10;
        $request['product_height'] = $data['height']/10;
        $request['contain_battery'] = param($data, 'contain_battery', 0);
        $request['product_declared_value'] = $data['declared_value'];
        $request['product_declared_name'] = $data['declared_name'];;
        $request['product_declared_name_zh'] = $data['declared_name_zh'];
        $request['cat_id_level0'] = $data['cat_id_level0'];
        $request['cat_id_level1'] = $data['cat_id_level1'];
        $request['cat_id_level2'] = $data['cat_id_level2'];
        $request['verify'] = 1;
        $request['hs_code'] = param($data, 'hs_code');
        $request['Warning_qty'] = param($data, 'Warning_qty',0);
        return $request;
    }

    /**
     * @desc 获取新建产品
     * @params array $config
     * @param array $params
     * @return array
     */
    public function createProduct($config, $params)
    {
        try{
            $this->formatHeader($config);
            $request_data = $this->bulidProductData($params);
            $rs = $this->_service->createProduct($request_data);
            if ($rs['ask'] == 'Success') {
                $this->result['success'] = true;
                 return $this->result;
            } else {
                $this->result['success'] = false;
                $this->result['error'] = param($rs['Error'], 'errMessage', '未知错误');
            }
        } catch (Exception $ex){
            $this->result['success'] = false;
            $this->result['error'] = $ex->getMessage();
        }
        return  $this->result;
    }


    /**
     * @desc 获取产品列表
     * @params array $config
     * @return array
     */
    public function getProductList($config)
    {
        set_time_limit(0);
        try{
            $this->formatHeader($config);
            $lists =  $this->getResponseData('ProductList');
            $data = [];
            foreach($lists as $item){
                $temp['sku'] = $item['product_sku'];
                $temp['status'] = (new WarehouseGoodsForecastModel())->changeStatus($item['product_status']);
                $temp['title'] = $item['product_title'];
                $temp['weight'] = $item['product_weight']*1000;
                $temp['length'] = $item['product_length']*10;
                $temp['width'] = $item['product_width']*10;
                $temp['height'] = $item['product_height']*10;
                $temp['contain_battery'] = $item['contain_battery'];
                $temp['declared_value'] = $item['product_declared_value'];
                $temp['third_category_id'] = $item['cat_id_level2'];
                $temp['declared_name'] = $item['product_declared_name'];
                $data[] = $temp;
            }
            $this->result['success'] = true;
            $this->result['data'] = $data;
        } catch (Exception $ex) {
            $this->result['success'] = false;
            $this->result['error'] = $ex->getMessage();
        }
        return $this->result;
    }

    /**
     * @desc 组装库存返回格式
     * @param array $lists
     * @return array
     */
    private function buildReturnInventory($lists)
    {
        $data = [];
        foreach($lists as $item){
            $temp['sku'] = $item['product_sku'];
            $temp['warehouse_code'] = $item['warehouse_code'];
            $temp['allocating_quantity'] = $item['onway']; //在途=调拨
            $temp['available_quantity'] = $item['sellable']; //可用=可售
            $temp['defects_quantity'] = $item['unsellable']; //故障品=不合格
            $temp['waiting_shipping_quantity'] = $item['reserved']; //待发=待出库
            $temp['quantity'] = $item['unsellable']+$item['reserved']; //待发=待出库
            $data[] = $temp;
        }
        return $data;
    }

    /**
     * @desc 获取库存
     * @param array $config
     * @param array $params
     * @return array
     */
    public function getProductInventory($config, $params = [])
    {
        set_time_limit(0);
        try{
            $this->formatHeader($config);
            $request_data['warehouse_code'] = $params['code'];
            $data = $this->getResponseData('ProductInventory', $request_data);
            $this->result['success'] = true;
            $this->result['data'] = $this->buildReturnInventory($data);
        } catch (Exception $ex) {
            $this->result['success'] = false;
            $this->result['error'] = $ex->getMessage();
        }
        return $this->result;
    }

    /**
     * @desc 获取系统仓库
     * @param array $config
     * @return array
     */
    public function getWarehouse($config)
    {
        set_time_limit(0);
        try{
            $this->formatHeader($config);
            $result = $this->getResponseData('Warehouse');
            $data = [];
            foreach ($result as $key=>$item) {
                $data[$key]['code'] = $item['warehouse_code'];
                $data[$key]['name'] = $item['warehouse_name'];
            }
            $this->result['success'] = true;
            $this->result['data'] = $data;
        } catch (Exception $ex) {
            $this->result['success'] = false;
            $this->result['error'] = $ex->getMessage();
        }
        return $this->result;
    }


    /*
     * 获取中国区域列表
     */
    public function getRegion()
    {
        $data = $this->getResponseData('region');
        var_dump($data);exit;
    }


    /**
     *获取支持揽收的区域
     */
    public function getRegionForReceiving()
    {
        $rs = $this->_service->getRegionForReceiving();
        if($rs['ask']=='Success'  && $rs['data']){
            var_dump($rs['data']);exit;
        }
    }

    /**
     *获取仓库邮寄方式(可指定仓库)
     */
    public function getShippingMethod($warehouse_code='')
    {
        $params = $warehouse_code ? array('warehouseCode'=>$warehouse_code) : array();
        $rs = $this->_service->getShippingMethod($params);
        if($rs['ask']=='Success'  && $rs['data']){
            var_dump($rs['data']);exit;
        }
    }


    /**
     *获取公司账户信息
     */
    public function getAccount()
    {
        $rs = $this->_service->getAccount();
        if($rs['ask']=='Success'  && $rs['data']){
            var_dump($rs['data']);exit;
        }
    }

    /**
     *获修改产品(只有草稿状态才能修改)
     * @params array  $params
     * product_sku string SKU
     * reference_no string 商品参考代码
     * product_title string 产品标题
     * product_weight int 重量，单位KG
     * product_weight float 重量，单位KG
     * product_length float 长，单位CM
     * product_width float 宽，单位CM
     * product_height float 高，单位CM
     * product_height float 高，单位CM
     * contain_battery int 货物属性，0普货，1含电，2 纯电
     * product_declared_value int 申报价值，币种默认为USD
     * product_declared_name string 申报价值，申报名称 (英文)
     * product_declared_name_zh string 申报名称 (中文)
     * cat_lang string 品类语言，zh中文，en英文，默认为en
     * cat_id_level0 int 一级品类
     * cat_id_level1 int 二级品类
     * cat_id_level2 int 三级品类
     * verify int 0：创建(默认)  1：默认推送wms  审核
     * verify int 0：创建(默认)  1：默认推送wms  审核
     * hs_code string 海关编码
     * Warning_qty int string 预警数量
     */
    public function modifyProduct($params)
    {
        $validateWarehouseArea = validate('Svc');
        if (!$validateWarehouseArea->scene('create_product')->check($params)) {
            return json(['message' => $validateWarehouseArea->getError()], 400);
        }
        $rs = $this->_service->modifyProduct($params);
        if ($rs['ask'] == 'Success') {
            echo '成功！';
        }
    }


    /**
     *获取入库单
     */
    public function createAsn($params)
    {
        $validateWarehouseArea = validate('Svc');
        if (!$validateWarehouseArea->scene('create_asn')->check($params)) {
            return json(['message' => $validateWarehouseArea->getError()], 400);
        }
        $params['income_type'] = param($params, 'income_type', 0);
        //揽收字段验证
        if($params['income_type'] == 1){
            if (!$validateWarehouseArea->scene('create_asn')->check($params)) {
                return json(['message' => $validateWarehouseArea->getError()], 400);
            }
        }
        $rs = $this->_service->createAsn($params);
        if ($rs['ask'] == 'Success') {
            echo '成功！';
        }
        var_dump($rs);exit;
    }

    /**
     *获取入库单
     */
    public function getAsnList($params)
    {
        set_time_limit(0);
        $data = $this->getResponseData('AsnList', $params);
        var_dump($data);exit;
    }


    /**
     *根据订单号获取单票订单信息
     */
    public function getOrderByCode($order_code = '11555')
    {
        set_time_limit(0);
        $params = [];
        $params['order_code'] = $order_code;
        $rs = $this->_service->getOrderByCode($params);
        if ($rs['ask'] == 'Success' && $rs['data']) {
            var_dump($rs['data']);
            exit;
        }
    }


    /**
     *根据订单号获取单票订单信息
     */
    public function getOrderByRefCode($reference_no = '11555')
    {
        set_time_limit(0);
        $params = [];
        $params['reference_no'] = $reference_no;
        $rs = $this->_service->getOrderByRefCode($params);
        if($rs['ask']=='Success'  && $rs['data']){
            var_dump($rs['data']);exit;
        }
    }

    /**
     *根据订单号获取单票订单信息
     */
    public function getOrderList($reference_no = '11555')
    {
        set_time_limit(0);
        $params = [];
        $data = $this->getResponseData('OrderList', $params, 1, 1);
        var_dump($data);exit;
    }

    /**
     *根据订单号获取单票订单信息
     */
    public function getCalculateFee($params)
    {
        set_time_limit(0);
        $params = [];
        $rs = $this->_service->getCalculateFee($params);
        if($rs['ask']=='Success'  && $rs['data']){
            var_dump($rs['data']);exit;
        }
//        $data = $this->getResponseData('getCalculateFee', $params, 1, 1);
//        var_dump($data);exit;
    }


    /**
     *创建订单
     */
    public function createOrder($params)
    {
        set_time_limit(0);
        $rs = $this->_service->createOrder($params);
        if($rs['ask']=='Success'  && $rs['data']){
            // var_dump($rs['data']);exit;
        }
        var_dump($rs);exit;
//        $data = $this->getResponseData('getCalculateFee', $params, 1, 1);
//        var_dump($data);exit;
    }

}